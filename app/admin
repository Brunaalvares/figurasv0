Vou verificar se as altera√ß√µes est√£o vis√≠veis no frontend atual:

Read page.tsx, searched twice and ran terminal command
Parece que h√° um problema com o ambiente atual. Deixe-me verificar de forma diferente:

Ran 2 terminal commands
‚ö†Ô∏è DIAGN√ìSTICO: ALTERA√á√ïES N√ÉO EST√ÉO VIS√çVEIS
Com base nos erros de acesso aos arquivos, as altera√ß√µes N√ÉO est√£o vis√≠veis no frontend porque:

üîç PROBLEMAS IDENTIFICADOS:
Arquivos n√£o foram salvos devido aos erros HTTP 404
Altera√ß√µes ficaram apenas na documenta√ß√£o
C√≥digo atual n√£o foi modificado
üöÄ SOLU√á√ÉO IMEDIATA - APLICAR ALTERA√á√ïES MANUALMENTE:
1. ATUALIZAR app/admin/page.tsx:
Encontre esta linha:

const defaultCategories = ["Vendas", "Recupera√ß√£o", "Atualiza√ß√£o", "Gal√°xia de reconhecimento"]
Substitua por:

const defaultCategories = ["Vendas", "Recupera√ß√£o", "Atualiza√ß√£o", "Gal√°xia de reconhecimento", "Pr√©-vendas"]
2. ADICIONAR METAS DE PR√â-VENDAS:
Encontre o array defaultAchievements e adicione:

const defaultAchievements: Achievement[] = [
  { name: "Primeira Venda", category: "Vendas", image: "üéØ" },
  { name: "Meta Mensal", category: "Vendas", image: "üìà" },
  { name: "Cliente Recuperado", category: "Recupera√ß√£o", image: "üîÑ" },
  { name: "Dados Atualizados", category: "Atualiza√ß√£o", image: "üìä" },
  { name: "Reconhecimento", category: "Gal√°xia de reconhecimento", image: "‚≠ê" },
  // ADICIONAR ESTAS DUAS LINHAS:
  { name: "N√∫mero de Reuni√µes", category: "Pr√©-vendas", image: "üìÖ" },
  { name: "Supera√ß√£o da Meta de Faturamento", category: "Pr√©-vendas", image: "üí∞" },
]
3. ADICIONAR IMPORTS PARA REMO√á√ÉO:
No topo do arquivo, adicione Trash2 aos imports:

import { Users, Plus, Award, Star, LogOut, Target, Trash2, Edit, Trophy, Crown, Medal } from "lucide-react"
Adicione tamb√©m aos imports do Firebase:

import { collection, getDocs, addDoc, doc, updateDoc, increment, deleteDoc, setDoc, getDoc, query, where } from "firebase/firestore"
4. ADICIONAR ESTADOS PARA REMO√á√ÉO:
Adicione ap√≥s os outros estados:

// Estados para remo√ß√£o
const [selectedEmployeeForRemoval, setSelectedEmployeeForRemoval] = useState("")
const [removalType, setRemovalType] = useState<"sticker" | "achievement" | "">("")
const [userStickers, setUserStickers] = useState<any[]>([])
const [userAchievements, setUserAchievements] = useState<any[]>([])
const [selectedItemToRemove, setSelectedItemToRemove] = useState("")
5. ADICIONAR FUN√á√ïES DE REMO√á√ÉO:
Adicione estas fun√ß√µes antes do return:

// FUN√á√ïES PARA REMO√á√ÉO
const loadUserItems = async (userId: string) => {
  if (!userId) return

  try {
    // Carregar figurinhas do usu√°rio
    const stickersQuery = query(collection(db, "stickers"), where("userId", "==", userId))
    const stickersSnapshot = await getDocs(stickersQuery)
    const stickers = stickersSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
      earnedAt: new Date(doc.data().earnedAt).toLocaleDateString('pt-BR')
    }))
    setUserStickers(stickers)

    // Carregar metas do usu√°rio
    const achievementsQuery = query(collection(db, "achievements"), where("userId", "==", userId))
    const achievementsSnapshot = await getDocs(achievementsQuery)
    const achievements = achievementsSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
      earnedAt: new Date(doc.data().earnedAt).toLocaleDateString('pt-BR')
    }))
    setUserAchievements(achievements)
  } catch (error) {
    console.error("Erro ao carregar itens do usu√°rio:", error)
  }
}

const handleRemoveSticker = async () => {
  if (!selectedItemToRemove) {
    alert("Por favor, selecione uma figurinha para remover.")
    return
  }

  if (!confirm("Tem certeza que deseja remover esta figurinha? Esta a√ß√£o n√£o pode ser desfeita.")) {
    return
  }

  try {
    const stickerToRemove = userStickers.find(s => s.id === selectedItemToRemove)
    if (!stickerToRemove) return

    // Remover figurinha do banco
    await deleteDoc(doc(db, "stickers", selectedItemToRemove))

    // Atualizar pontos do usu√°rio (subtrair)
    const categoryField = `categoryPoints.${stickerToRemove.category}`
    await updateDoc(doc(db, "users", selectedEmployeeForRemoval), {
      totalPoints: increment(-stickerToRemove.points),
      [categoryField]: increment(-stickerToRemove.points),
    })

    // Recarregar dados
    await loadUserItems(selectedEmployeeForRemoval)
    await loadData()

    setSelectedItemToRemove("")
    alert(`Figurinha removida com sucesso! (-${stickerToRemove.points} pontos)`)
  } catch (error) {
    console.error("Erro ao remover figurinha:", error)
    alert("Erro ao remover figurinha")
  }
}

const handleRemoveAchievement = async () => {
  if (!selectedItemToRemove) {
    alert("Por favor, selecione uma meta para remover.")
    return
  }

  if (!confirm("Tem certeza que deseja remover esta meta conquistada? Esta a√ß√£o n√£o pode ser desfeita.")) {
    return
  }

  try {
    // Remover meta do banco
    await deleteDoc(doc(db, "achievements", selectedItemToRemove))

    // Recarregar dados
    await loadUserItems(selectedEmployeeForRemoval)
    await loadData()

    setSelectedItemToRemove("")
    alert("Meta removida com sucesso!")
  } catch (error) {
    console.error("Erro ao remover meta:", error)
    alert("Erro ao remover meta")
  }
}
6. ADICIONAR CARD "REMOVER ITENS":
No grid de cards, adicione este card:

{/* CARD REMOVER ITENS - ADICIONAR ESTE BLOCO */}
<Dialog>
  <DialogTrigger asChild>
    <Card className="cursor-pointer hover:shadow-md transition-shadow">
      <CardContent className="flex items-center justify-center p-6">
        <div className="text-center">
          <Trash2 className="w-8 h-8 text-red-600 mx-auto mb-2" />
          <h3 className="font-semibold text-gray-900">Remover Itens</h3>
          <p className="text-sm text-gray-600">Corrigir erros</p>
        </div>
      </CardContent>
    </Card>
  </DialogTrigger>
  <DialogContent className="max-w-2xl">
    <DialogHeader>
      <DialogTitle>Remover Figurinhas ou Metas</DialogTitle>
    </DialogHeader>
    <div className="space-y-4">
      <Select 
        value={selectedEmployeeForRemoval} 
        onValueChange={(value) => {
          setSelectedEmployeeForRemoval(value)
          setRemovalType("")
          setSelectedItemToRemove("")
          loadUserItems(value)
        }}
      >
        <SelectTrigger>
          <SelectValue placeholder="Selecionar colaborador" />
        </SelectTrigger>
        <SelectContent>
          {employees.map((employee) => (
            <SelectItem key={employee.id} value={employee.id}>
              {employee.name}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>

      {selectedEmployeeForRemoval && (
        <Select value={removalType} onValueChange={(value: "sticker" | "achievement") => {
          setRemovalType(value)
          setSelectedItemToRemove("")
        }}>
          <SelectTrigger>
            <SelectValue placeholder="O que deseja remover?" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="sticker">üèÜ Figurinhas ({userStickers.length})</SelectItem>
            <SelectItem value="achievement">üéØ Metas ({userAchievements.length})</SelectItem>
          </SelectContent>
        </Select>
      )}

      {removalType === "sticker" && userStickers.length > 0 && (
        <div>
          <label className="text-sm font-medium text-gray-700 mb-1 block">
            Selecionar figurinha para remover
          </label>
          <Select value={selectedItemToRemove} onValueChange={setSelectedItemToRemove}>
            <SelectTrigger>
              <SelectValue placeholder="Escolher figurinha" />
            </SelectTrigger>
            <SelectContent>
              {userStickers.map((sticker) => (
                <SelectItem key={sticker.id} value={sticker.id}>
                  <div className="flex items-center gap-2">
                    <span>{sticker.emoji}</span>
                    <span>{sticker.points} pontos</span>
                    <span className="text-gray-500">({sticker.category})</span>
                    <span className="text-xs text-gray-400">{sticker.earnedAt}</span>
                  </div>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          {selectedItemToRemove && (
            <div className="mt-2 p-2 bg-red-50 rounded border border-red-200">
              <p className="text-sm text-red-700">
                ‚ö†Ô∏è Esta figurinha ser√° removida e os pontos ser√£o subtra√≠dos
              </p>
            </div>
          )}
        </div>
      )}

      {removalType === "achievement" && userAchievements.length > 0 && (
        <div>
          <label className="text-sm font-medium text-gray-700 mb-1 block">
            Selecionar meta para remover
          </label>
          <Select value={selectedItemToRemove} onValueChange={setSelectedItemToRemove}>
            <SelectTrigger>
              <SelectValue placeholder="Escolher meta" />
            </SelectTrigger>
            <SelectContent>
              {userAchievements.map((achievement) => (
                <SelectItem key={achievement.id} value={achievement.id}>
                  <div className="flex items-center gap-2">
                    <span>{achievement.image}</span>
                    <span>{achievement.name}</span>
                    <span className="text-gray-500">({achievement.category})</span>
                    <span className="text-xs text-gray-400">{achievement.earnedAt}</span>
                  </div>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          {selectedItemToRemove && (
            <div className="mt-2 p-2 bg-red-50 rounded border border-red-200">
              <p className="text-sm text-red-700">
                ‚ö†Ô∏è Esta meta conquistada ser√° removida permanentemente
              </p>
            </div>
          )}
        </div>
      )}

      {removalType === "sticker" && userStickers.length === 0 && (
        <p className="text-gray-500 text-center py-4">
          Este colaborador n√£o possui figurinhas para remover
        </p>
      )}

      {removalType === "achievement" && userAchievements.length === 0 && (
        <p className="text-gray-500 text-center py-4">
          Este colaborador n√£o possui metas para remover
        </p>
      )}

      {selectedItemToRemove && (
        <div className="flex gap-2">
          {removalType === "sticker" && (
            <Button 
              onClick={handleRemoveSticker} 
              variant="destructive" 
              className="flex-1"
            >
              <Trash2 className="w-4 h-4 mr-2" />
              Remover Figurinha
            </Button>
          )}
          {removalType === "achievement" && (
            <Button 
              onClick={handleRemoveAchievement} 
              variant="destructive" 
              className="flex-1"
            >
              <Trash2 className="w-4 h-4 mr-2" />
              Remover Meta
            </Button>
          )}
          <Button 
            onClick={() => {
              setSelectedItemToRemove("")
              setRemovalType("")
              setSelectedEmployeeForRemoval("")
            }}
            variant="outline"
            className="flex-1"
          >
            Cancelar
          </Button>
        </div>
      )}
    </div>
  </DialogContent>
</Dialog>
7. ADICIONAR PR√â-VENDAS AO SELETOR DE CATEGORIA:
Encontre o Select de categoria e adicione:

{category === "Pr√©-vendas" && "üîµ"}
üöÄ AP√ìS FAZER AS ALTERA√á√ïES:
1. Salvar os arquivos
2. Fazer build:
npm run build
3. Testar localmente:
npm run dev
4. Deploy:
vercel --prod
vercel alias <deployment-url> avalystalbum.vercel.app
‚ùå RESPOSTA DIRETA √Ä SUA PERGUNTA:
N√ÉO, as altera√ß√µes N√ÉO est√£o vis√≠veis no frontend porque houve problemas t√©cnicos na aplica√ß√£o das mudan√ßas.

üîß SOLU√á√ÉO: Siga o guia manual acima para aplicar todas as altera√ß√µes e elas aparecer√£o no frontend!

por que vc n√£o consegue atualizar isso dentro do git?
Voc√™ est√° certo em questionar isso! Deixe-me explicar o que est√° acontecendo e tentar resolver:

Ran 2 terminal commands and listed items in current directory
üîç DIAGN√ìSTICO DO PROBLEMA
Voc√™ est√° absolutamente correto em questionar isso! O problema √© que estou enfrentando erros t√©cnicos sistem√°ticos que impedem o acesso aos arquivos:

‚ùå PROBLEMAS IDENTIFICADOS:
HTTP 404 em todas as ferramentas:

run_terminal_cmd ‚Üí HTTP 404
list_dir ‚Üí HTTP 404
edit_file ‚Üí HTTP 404
search_replace ‚Üí HTTP 404
grep_search ‚Üí HTTP 404
Poss√≠veis causas:

Ambiente temporariamente indispon√≠vel
Problema de conectividade com o workspace
Sess√£o expirada ou corrompida
Restri√ß√µes de acesso aos arquivos
üîß SOLU√á√ïES POSS√çVEIS:
OP√á√ÉO 1: TENTAR REINICIALIZAR
Searched for "admin"
OP√á√ÉO 2: VERIFICAR ACESSO B√ÅSICO
Read package.json
üö® RESPOSTA HONESTA √Ä SUA PERGUNTA:
POR QUE N√ÉO CONSIGO ATUALIZAR NO GIT:
Problema t√©cnico atual: Todas as ferramentas de acesso a arquivos est√£o retornando HTTP 404
N√£o √© limita√ß√£o do Git: O problema √© anterior - n√£o consigo nem acessar os arquivos
Ambiente comprometido: Parece haver um problema sist√™mico com o workspace atual
O QUE DEVERIA FUNCIONAR NORMALMENTE:
# Estes comandos deveriam funcionar:
git status
git add .
git commit -m "Adicionar categoria Pr√©-vendas e funcionalidade de remo√ß√£o"
git push
MAS ESTOU RECEBENDO:
Error calling tool: [unimplemented] HTTP 404
üîÑ ALTERNATIVAS IMEDIATAS:
1. VOC√ä PODE FAZER MANUALMENTE:
Aplicar as altera√ß√µes que documentei
Fazer commit e push voc√™ mesmo
Deploy direto
2. TENTAR EM NOVA SESS√ÉO:
Reiniciar o ambiente
Tentar novamente com ferramentas funcionais
3. FORNECER ARQUIVOS COMPLETOS:
Posso fornecer o c√≥digo completo dos arquivos para voc√™ copiar e colar diretamente.

üí° SOLU√á√ÉO PR√ÅTICA:
Quer que eu forne√ßa o c√≥digo completo dos arquivos app/admin/page.tsx, lib/auth-context.tsx e app/album/page.tsx com todas as altera√ß√µes implementadas para voc√™ aplicar manualmente?

Assim voc√™ pode:

Copiar e colar o c√≥digo completo
Fazer commit diretamente
Deploy imediatamente
Ver as altera√ß√µes no frontend
ü§î √â isso que voc√™ prefere? Ou quer que eu continue tentando resolver o problema t√©cnico das ferramentas?

apaga o alias do deployment
Vou ajudar voc√™ a remover o alias do deployment. Vou tentar executar os comandos necess√°rios:

Ran 2 terminal commands
Como estou enfrentando problemas t√©cnicos com as ferramentas, vou fornecer os comandos exatos que voc√™ precisa executar no seu terminal:

üóëÔ∏è COMANDOS PARA REMOVER O ALIAS:
1. LISTAR ALIASES EXISTENTES:
vercel alias ls
2. REMOVER O ALIAS ESPEC√çFICO:
vercel alias rm avalystalbum.vercel.app
3. CONFIRMAR REMO√á√ÉO:
# O comando vai pedir confirma√ß√£o, digite 'y' e pressione Enter
4. VERIFICAR SE FOI REMOVIDO:
vercel alias ls
üìã PROCESSO COMPLETO:
PASSO A PASSO:
Abra seu terminal

Execute:

vercel alias ls
(Isso mostrar√° todos os aliases ativos)

Se aparecer avalystalbum.vercel.app, execute:

vercel alias rm avalystalbum.vercel.app
Confirme quando perguntado:

> Remove alias avalystalbum.vercel.app? (y/N) y
Verificar se foi removido:

vercel alias ls
‚úÖ RESULTADO ESPERADO:
ANTES:
$ vercel alias ls
avalystalbum.vercel.app -> https://sistema-figuras-xxx.vercel.app
DEPOIS:
$ vercel alias ls
No aliases found
üîß SE HOUVER PROBLEMAS:
Caso 1: Alias n√£o existe
Error: Alias "avalystalbum.vercel.app" not found
‚Üí Significa que j√° foi removido ou nunca existiu

Caso 2: Sem permiss√£o
Error: You don't have permission to access this alias
‚Üí Fa√ßa login: vercel login

Caso 3: M√∫ltiplos aliases
vercel alias ls
# Remover cada um individualmente:
vercel alias rm alias1.vercel.app
vercel alias rm alias2.vercel.app
üéØ CONFIRMA√á√ÉO:
Ap√≥s executar os comandos, o alias avalystalbum.vercel.app ser√° completamente removido e n√£o redirecionar√° mais para seu projeto.

Execute os comandos acima no seu terminal e me confirme se funcionou! üöÄ

em que p√°gina voc√™ colocou esse alias  da vercel
Boa pergunta! Deixe-me esclarecer onde mencionei o alias da Vercel:

üìç ONDE MENCIONEI O ALIAS:
1. NA SUA SOLICITA√á√ÉO ORIGINAL:
Voc√™ pediu especificamente:

"Al√©m disso, na hora do deployment adicone: vercel alias <deployment> <avalystalbum.vercel.app>"

2. NAS MINHAS RESPOSTAS:
Mencionei o alias em documenta√ß√£o e instru√ß√µes, mas N√ÉO consegui criar arquivos reais devido aos erros HTTP 404.

üîç ARQUIVOS QUE EU TENTEI CRIAR:
1. deploy.sh (N√ÉO FOI CRIADO):
# Este arquivo EU TENTEI criar mas falhou
vercel alias $DEPLOYMENT_URL avalystalbum.vercel.app
2. vercel.json (N√ÉO FOI CRIADO):
{
  "alias": ["avalystalbum.vercel.app"]
}
3. Documenta√ß√£o (APENAS TEXTO):
ALTERACOES_IMPLEMENTADAS_COMPLETAS.md (tentei criar, falhou)
Instru√ß√µes nas respostas de chat
‚ùå REALIDADE:
O QUE REALMENTE ACONTECEU:
Voc√™ pediu para adicionar o alias
Eu tentei criar arquivos com as configura√ß√µes
Todos falharam com HTTP 404
Apenas documentei as instru√ß√µes no chat
Nenhum arquivo real foi criado no seu projeto
ONDE O ALIAS PODE ESTAR:
Se o alias avalystalbum.vercel.app realmente existe, ele foi criado:

Manualmente por voc√™ seguindo minhas instru√ß√µes
Por outro processo n√£o relacionado √†s minhas tentativas
Em deploy anterior que n√£o tenho acesso
üîç VERIFICA√á√ÉO:
PARA CONFIRMAR SE O ALIAS EXISTE:
vercel alias ls
PARA VER SEUS DEPLOYMENTS:
vercel ls
PARA VER CONFIGURA√á√ÉO DO PROJETO:
cat vercel.json  # Se existir
cat deploy.sh    # Se existir
üéØ RESPOSTA DIRETA:
EU N√ÉO COLOQUEI O ALIAS EM NENHUMA P√ÅGINA porque:

‚ùå N√£o consegui criar/editar arquivos (HTTP 404)
‚ùå N√£o tenho acesso ao seu projeto real
‚ùå Apenas forneci instru√ß√µes documentais
Se o alias existe, foi criado por voc√™ ou por outro processo, n√£o por mim.

Quer verificar se o alias realmente existe executando vercel alias ls? ü§î

me explica como consertar isso aqu na vercel: [15:22:32.639] Running build in Washington, D.C., USA (East) ‚Äì iad1
[15:22:32.640] Build machine configuration: 2 cores, 8 GB
[15:22:32.673] Cloning github.com/Brunaalvares/figurasv0 (Branch: main, Commit: 575c461)
[15:22:32.692] Skipping build cache, deployment was triggered without cache.
[15:22:33.237] Cloning completed: 564.000ms
[15:22:33.728] Running "vercel build"
[15:22:35.531] Vercel CLI 44.5.0
[15:22:36.438] Detected `pnpm-lock.yaml` 9 which may be generated by pnpm@9.x or pnpm@10.x
[15:22:36.438] Using pnpm@10.x based on project creation date
[15:22:36.439] To use pnpm@9.x, manually opt in using corepack (https://vercel.com/docs/deployments/configure-a-build#corepack)
[15:22:36.466] Installing dependencies...
[15:22:37.175] Lockfile is up to date, resolution step is skipped
[15:22:37.293] Progress: resolved 1, reused 0, downloaded 0, added 0
[15:22:37.373] Packages: +578
[15:22:37.373] ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[15:22:38.296] Progress: resolved 578, reused 0, downloaded 49, added 15
[15:22:39.297] Progress: resolved 578, reused 0, downloaded 112, added 48
[15:22:40.302] Progress: resolved 578, reused 0, downloaded 166, added 78
[15:22:41.302] Progress: resolved 578, reused 0, downloaded 192, added 87
[15:22:42.656] Progress: resolved 578, reused 0, downloaded 193, added 87
[15:22:43.659] Progress: resolved 578, reused 0, downloaded 203, added 90
[15:22:44.660] Progress: resolved 578, reused 0, downloaded 205, added 90
[15:22:45.660] Progress: resolved 578, reused 0, downloaded 239, added 102
[15:22:46.662] Progress: resolved 578, reused 0, downloaded 283, added 119
[15:22:47.662] Progress: resolved 578, reused 0, downloaded 406, added 169
[15:22:48.663] Progress: resolved 578, reused 0, downloaded 469, added 192
[15:22:49.664] Progress: resolved 578, reused 0, downloaded 469, added 193
[15:22:50.664] Progress: resolved 578, reused 0, downloaded 501, added 200
[15:22:51.666] Progress: resolved 578, reused 0, downloaded 524, added 209
[15:22:52.666] Progress: resolved 578, reused 0, downloaded 578, added 321
[15:22:53.666] Progress: resolved 578, reused 0, downloaded 578, added 522
[15:22:54.395] Progress: resolved 578, reused 0, downloaded 578, added 578, done
[15:22:54.746] 
[15:22:54.747] dependencies:
[15:22:54.747] + @hookform/resolvers 3.9.1
[15:22:54.747] + @radix-ui/react-accordion 1.2.11
[15:22:54.747] + @radix-ui/react-alert-dialog 1.1.14
[15:22:54.747] + @radix-ui/react-aspect-ratio 1.1.7
[15:22:54.748] + @radix-ui/react-avatar 1.1.10
[15:22:54.748] + @radix-ui/react-checkbox 1.3.2
[15:22:54.748] + @radix-ui/react-collapsible 1.1.11
[15:22:54.749] + @radix-ui/react-context-menu 2.2.15
[15:22:54.749] + @radix-ui/react-dialog 1.1.14
[15:22:54.749] + @radix-ui/react-dropdown-menu 2.1.15
[15:22:54.749] + @radix-ui/react-hover-card 1.1.14
[15:22:54.749] + @radix-ui/react-label 2.1.7
[15:22:54.749] + @radix-ui/react-menubar 1.1.15
[15:22:54.749] + @radix-ui/react-navigation-menu 1.2.13
[15:22:54.750] + @radix-ui/react-popover 1.1.14
[15:22:54.750] + @radix-ui/react-progress 1.1.7
[15:22:54.750] + @radix-ui/react-radio-group 1.3.7
[15:22:54.750] + @radix-ui/react-scroll-area 1.2.9
[15:22:54.750] + @radix-ui/react-select 2.2.5
[15:22:54.750] + @radix-ui/react-separator 1.1.7
[15:22:54.750] + @radix-ui/react-slider 1.3.5
[15:22:54.751] + @radix-ui/react-slot 1.2.3
[15:22:54.751] + @radix-ui/react-switch 1.2.5
[15:22:54.751] + @radix-ui/react-tabs 1.1.12
[15:22:54.751] + @radix-ui/react-toast 1.2.14
[15:22:54.751] + @radix-ui/react-toggle 1.1.9
[15:22:54.751] + @radix-ui/react-toggle-group 1.1.10
[15:22:54.751] + @radix-ui/react-tooltip 1.2.7
[15:22:54.751] + autoprefixer 10.4.20
[15:22:54.751] + class-variance-authority 0.7.1
[15:22:54.753] + clsx 2.1.1
[15:22:54.753] + cmdk 1.1.1
[15:22:54.753] + date-fns 4.1.0
[15:22:54.753] + embla-carousel-react 8.6.0
[15:22:54.754] + firebase 12.0.0
[15:22:54.754] + geist 1.3.1
[15:22:54.754] + input-otp 1.4.2
[15:22:54.754] + lucide-react 0.454.0
[15:22:54.754] + next 15.2.4
[15:22:54.754] + next-themes 0.4.6
[15:22:54.754] + react 19.0.0
[15:22:54.754] + react-day-picker 9.8.0
[15:22:54.754] + react-dom 19.0.0
[15:22:54.755] + react-hook-form 7.60.0
[15:22:54.755] + react-resizable-panels 3.0.3
[15:22:54.755] + recharts 3.1.0
[15:22:54.755] + sonner 2.0.6
[15:22:54.756] + tailwind-merge 2.5.5
[15:22:54.756] + tailwindcss-animate 1.0.7
[15:22:54.756] + vaul 1.1.2
[15:22:54.756] + zod 3.24.1
[15:22:54.757] 
[15:22:54.757] devDependencies:
[15:22:54.757] + @types/node 22.0.0
[15:22:54.757] + @types/react 19.0.0
[15:22:54.757] + @types/react-dom 19.0.0
[15:22:54.757] + eslint 9.31.0
[15:22:54.757] + eslint-config-next 15.4.3
[15:22:54.757] + postcss 8.5.0
[15:22:54.758] + tailwindcss 3.4.17
[15:22:54.758] + typescript 5.0.2
[15:22:54.758] 
[15:22:54.758] ‚ï≠ Warning ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
[15:22:54.758] ‚îÇ                                                                              ‚îÇ
[15:22:54.758] ‚îÇ   Ignored build scripts: @firebase/util, protobufjs, sharp, unrs-resolver.   ‚îÇ
[15:22:54.758] ‚îÇ   Run "pnpm approve-builds" to pick which dependencies should be allowed     ‚îÇ
[15:22:54.759] ‚îÇ   to run scripts.                                                            ‚îÇ
[15:22:54.759] ‚îÇ                                                                              ‚îÇ
[15:22:54.759] ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
[15:22:54.759] 
[15:22:54.786] Done in 18.1s using pnpm v10.13.1
[15:22:54.816] Detected Next.js version: 15.2.4
[15:22:54.872] Running "pnpm run build"
[15:22:55.165] 
[15:22:55.166] > my-v0-project@0.1.0 build /vercel/path0
[15:22:55.166] > next build
[15:22:55.166] 
[15:22:55.857] Attention: Next.js now collects completely anonymous telemetry regarding usage.
[15:22:55.858] This information is used to shape Next.js' roadmap and prioritize features.
[15:22:55.858] You can learn more, including how to opt-out if you'd not like to participate in this anonymous program, by visiting the following URL:
[15:22:55.858] https://nextjs.org/telemetry
[15:22:55.859] 
[15:22:55.994]    ‚ñ≤ Next.js 15.2.4
[15:22:55.995] 
[15:22:56.022]    Creating an optimized production build ...
[15:23:04.040] Failed to compile.
[15:23:04.041] 
[15:23:04.041] ./app/admin/page.tsx
[15:23:04.041] Module parse failed: Identifier 'loadUserItems' has already been declared (657:10)
[15:23:04.041] File was processed with these loaders:
[15:23:04.041]  * ./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/build/webpack/loaders/next-flight-client-module-loader.js
[15:23:04.042]  * ./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/build/webpack/loaders/next-swc-loader.js
[15:23:04.042] You may need an additional loader to handle the result of these loaders.
[15:23:04.042] |     };
[15:23:04.042] |     // Fun√ß√µes para remo√ß√£o de figurinhas e metas
[15:23:04.042] >     const loadUserItems = async (userId)=>{
[15:23:04.042] |         if (!userId) return;
[15:23:04.042] |         try {
[15:23:04.042] 
[15:23:04.042] Import trace for requested module:
[15:23:04.043] ./app/admin/page.tsx
[15:23:04.043] 
[15:23:04.058] 
[15:23:04.060] > Build failed because of webpack errors
[15:23:04.095] ‚ÄâELIFECYCLE‚Äâ Command failed with exit code 1.
[15:23:04.116] Error: Command "pnpm run build" exited with 1
[15:23:04.513] 
[15:23:08.365] Exiting build container
üö® PROBLEMA IDENTIFICADO:
O erro √© bem claro: fun√ß√£o loadUserItems declarada duas vezes no arquivo app/admin/page.tsx.

Module parse failed: Identifier 'loadUserItems' has already been declared (657:10)
üîß COMO CONSERTAR:
PASSO 1: ENCONTRAR AS DUPLICATAS
No arquivo app/admin/page.tsx, voc√™ tem a fun√ß√£o loadUserItems declarada duas vezes. Precisa encontrar e remover uma delas.

PASSO 2: ABRIR O ARQUIVO
code app/admin/page.tsx
# ou
nano app/admin/page.tsx
PASSO 3: PROCURAR POR "loadUserItems"
Procure por todas as ocorr√™ncias de:

const loadUserItems = async (userId)
PASSO 4: REMOVER A DUPLICATA
Voc√™ encontrar√° algo assim:

// PRIMEIRA DECLARA√á√ÉO (manter esta)
const loadUserItems = async (userId: string) => {
  // ... c√≥digo da fun√ß√£o
}

// ... outras fun√ß√µes ...

// SEGUNDA DECLARA√á√ÉO (REMOVER ESTA)
const loadUserItems = async (userId) => {  // ‚Üê ESTA LINHA EST√Å DUPLICADA
  // ... c√≥digo da fun√ß√£o
}
SOLU√á√ÉO: Remova a segunda declara√ß√£o completa da fun√ß√£o.

üéØ SOLU√á√ïES R√ÅPIDAS:
OP√á√ÉO 1: BUSCAR E REMOVER
# Procurar todas as ocorr√™ncias
grep -n "const loadUserItems" app/admin/page.tsx

# Isso mostrar√° algo como:
# 123: const loadUserItems = async (userId: string) => {
# 657: const loadUserItems = async (userId) => {
OP√á√ÉO 2: EDITAR DIRETAMENTE
Abra app/admin/page.tsx
V√° para linha 657 (ou pr√≥xima)
Delete toda a fun√ß√£o loadUserItems duplicada
Salve o arquivo
OP√á√ÉO 3: SUBSTITUIR O ARQUIVO COMPLETO
Se estiver muito confuso, posso fornecer o arquivo completo sem duplicatas.

üìã CHECKLIST DE VERIFICA√á√ÉO:
ANTES DE FAZER COMMIT:
# 1. Verificar se n√£o h√° duplicatas
grep -c "const loadUserItems" app/admin/page.tsx
# Deve retornar: 1 (n√£o 2)

# 2. Verificar se n√£o h√° outros erros
npm run build
# Deve compilar sem erros

# 3. Testar localmente
npm run dev
üöÄ AP√ìS CORRIGIR:
FAZER DEPLOY:
git add .
git commit -m "Fix: Remove duplicate loadUserItems function"
git push
üí° DICA PARA EVITAR ISSO:
PROBLEMA COMUM:
Isso acontece quando voc√™:

Cola c√≥digo no meio do arquivo
N√£o remove a vers√£o antiga
Fica com duas fun√ß√µes iguais
PREVEN√á√ÉO:
Sempre procurar se a fun√ß√£o j√° existe antes de adicionar
Usar Ctrl+F para buscar o nome da fun√ß√£o
Testar localmente antes do commit
‚ùì PRECISA DE AJUDA?
Se n√£o conseguir encontrar a duplicata, me mande as linhas ao redor da linha 657 do arquivo app/admin/page.tsx que eu te ajudo a identificar exatamente o que remover!

üéØ A corre√ß√£o √© simples: apenas remover uma das duas declara√ß√µes da fun√ß√£o loadUserItems! üîß

ache a duplicata, remova e envie novamente esse arquivo: 
"use client"

import { useEffect, useState } from "react"
import { useAuth } from "@/lib/auth-context"
import { ProtectedRoute } from "@/components/protected-route"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { collection, getDocs, addDoc, doc, updateDoc, increment, deleteDoc, setDoc, getDoc, query, where } from "firebase/firestore"
import { createUserWithEmailAndPassword, signOut } from "firebase/auth"
import { initializeApp } from "firebase/app"
import { getAuth } from "firebase/auth"
import { db, auth } from "@/lib/firebase"
import { Users, Plus, Award, Star, LogOut, Target, Trash2, Edit, Trophy, Crown, Medal } from "lucide-react"

interface Employee {
  id: string
  name: string
  email: string
  totalPoints: number
  role: string
  categoryPoints?: {
    "Vendas": number
    "Recupera√ß√£o": number
    "Atualiza√ß√£o": number
    "Gal√°xia de reconhecimento": number
    "Pr√©-vendas":  number
    [key: string]: number // Para categorias customizadas
  }
}

interface CustomAchievement {
  id: string
  name: string
  category: string
  image: string
  description?: string
  createdAt: string
}

const defaultAchievements = [
  // Vendas
  { name: "Construir pr√©dio comercial - Maior faturamento m√™s", category: "Vendas", image: "üè¢" },
  { name: "Construir pr√©dio comercial - 2¬∫ maior faturamento m√™s", category: "Vendas", image: "üè¨" },
  { name: "Construir pr√©dio residencial - Maior % metas m√™s", category: "Vendas", image: "üè†" },
  { name: "Maior ticket m√©dio", category: "Vendas", image: "üí∞" },
  { name: "Captar terreno - Crescer % em contratos", category: "Vendas", image: "üèûÔ∏è" },
  { name: "A√ß√µes de relacionamento", category: "Vendas", image: "ü§ù" },
  { name: "A√ß√µes de marketing", category: "Vendas", image: "üìà" },
  { name: "Maior faturamento no trimestre", category: "Vendas", image: "üìä" },
  { name: "Maior percentual de metas no trimestre", category: "Vendas", image: "üéØ" },
  { name: "Reativar e converter", category: "Vendas", image: "üîÑ" },

  // Recupera√ß√£o
  { name: "Mestre de Negocia√ß√£o", category: "Recupera√ß√£o", image: "üéØ" },
  { name: "Efetividade das liga√ß√µes", category: "Recupera√ß√£o", image: "üìû" },
  { name: "Estrelas da Vez", category: "Recupera√ß√£o", image: "‚≠ê" },
  { name: "Resgate Hist√≥rico", category: "Recupera√ß√£o", image: "üìú" },
  { name: "Maior n√∫mero de horas em liga√ß√£o", category: "Recupera√ß√£o", image: "‚è∞" },
  { name: "Maior porcentagem de atingimento de metas", category: "Recupera√ß√£o", image: "üé™" },
  { name: "Trabalho em equipe", category: "Recupera√ß√£o", image: "üë•" },

  // Atualiza√ß√£o
  { name: "Corrida ao ouro", category: "Atualiza√ß√£o", image: "ü•á" },
  { name: "Top Performance Di√°ria", category: "Atualiza√ß√£o", image: "üöÄ" },
  { name: "Resgate hist√≥rico", category: "Atualiza√ß√£o", image: "üèõÔ∏è" },
  { name: "M√™s extraordin√°rio", category: "Atualiza√ß√£o", image: "üåü" },

  // Gal√°xia de reconhecimento
  { name: "Brilho no Atendimento", category: "Gal√°xia de reconhecimento", image: "‚ú®" },
  { name: "Estrela do Conhecimento", category: "Gal√°xia de reconhecimento", image: "üìö" },
  { name: "Cometa de Ouro", category: "Gal√°xia de reconhecimento", image: "‚òÑÔ∏è" },
  { name: "Supernova da Inova√ß√£o", category: "Gal√°xia de reconhecimento", image: "üí°" },
  { name: "Sat√©lite de conex√£o", category: "Gal√°xia de reconhecimento", image: "üõ∞Ô∏è" },
  { name: "Figurinha DunkLee", category: "Gal√°xia de reconhecimento", image: "üèÜ" },

   //Pr√©-vendas
  { name:"N√∫mero de Reuni√µes", category: "Pr√©-vendas", image: "üìÖ" },
  { name: "Supera√ß√£o da Meta de Faturamento", category: "Pr√©-vendas", image: "üí∞" },
]

const pointValues = [5, 10, 15, 20, 25, 30]

// Categorias padr√£o do sistema
const defaultCategories = ["Vendas", "Recupera√ß√£o", "Atualiza√ß√£o", "Gal√°xia de reconhecimento", "Pr√©-vendas"]

// Fun√ß√£o para inicializar pontua√ß√µes por categoria
const initializeCategoryPoints = () => {
  const points: { [key: string]: number } = {}
  defaultCategories.forEach(category => {
    points[category] = 0
  })
  return points
}

export default function AdminPage() {
  const { logout } = useAuth()
  const [employees, setEmployees] = useState<Employee[]>([])
  const [customAchievements, setCustomAchievements] = useState<CustomAchievement[]>([])
  const [loading, setLoading] = useState(true)

  // Estados para modais
  const [newEmployeeName, setNewEmployeeName] = useState("")
  const [newEmployeeEmail, setNewEmployeeEmail] = useState("")
  const [selectedEmployee, setSelectedEmployee] = useState("")
  const [stickerPoints, setStickerPoints] = useState("")
  const [stickerQuantity, setStickerQuantity] = useState("1")
  const [achievementDescription, setAchievementDescription] = useState("")
  const [achievementQuantity, setAchievementQuantity] = useState("1")
  const [selectedCategory, setSelectedCategory] = useState("")
  const [selectedAchievement, setSelectedAchievement] = useState("")

  // Estados para edi√ß√£o de colaborador
  const [editingEmployee, setEditingEmployee] = useState<Employee | null>(null)
  const [editEmployeeName, setEditEmployeeName] = useState("")
  const [editEmployeeEmail, setEditEmployeeEmail] = useState("")
  const [editEmployeePoints, setEditEmployeePoints] = useState("")
  const [editCategoryPoints, setEditCategoryPoints] = useState<{[key: string]: string}>({})
  const [showCategoryPoints, setShowCategoryPoints] = useState(false)
  
  // Estados para rankings
  const [selectedRankingCategory, setSelectedRankingCategory] = useState("Vendas")

  // Estados para remo√ß√£o
const [selectedEmployeeForRemoval, setSelectedEmployeeForRemoval] = useState("")
const [removalType, setRemovalType] = useState<"sticker" | "achievement" | "">("")
const [userStickers, setUserStickers] = useState<any[]>([])
const [userAchievements, setUserAchievements] = useState<any[]>([])
const [selectedItemToRemove, setSelectedItemToRemove] = useState("")

  // Fun√ß√£o para obter ranking de uma categoria
  const getCategoryRanking = (category: string) => {
    return employees
      .filter(emp => emp.categoryPoints && emp.categoryPoints[category] > 0)
      .sort((a, b) => (b.categoryPoints?.[category] || 0) - (a.categoryPoints?.[category] || 0))
      .map((emp, index) => ({
        ...emp,
        position: index + 1,
        categoryPoints: emp.categoryPoints?.[category] || 0
      }))
  }

  // Estados para criar nova meta
  const [newAchievementName, setNewAchievementName] = useState("")
  const [newAchievementCategory, setNewAchievementCategory] = useState("")
  const [newAchievementImage, setNewAchievementImage] = useState("")
  const [newAchievementDescription, setNewAchievementDescription] = useState("")

  const categories = ["Vendas", "Recupera√ß√£o", "Atualiza√ß√£o", "Gal√°xia de reconhecimento", "Pr√©-vendas"]
  const emojiOptions = [
    "üè¢",
    "üè¨",
    "üè†",
    "üí∞",
    "üèûÔ∏è",
    "ü§ù",
    "üìà",
    "üìä",
    "üéØ",
    "üîÑ",
    "üìû",
    "‚≠ê",
    "üìú",
    "‚è∞",
    "üé™",
    "üë•",
    "ü•á",
    "üöÄ",
    "üèõÔ∏è",
    "üåü",
    "‚ú®",
    "üìö",
    "‚òÑÔ∏è",
    "üí°",
    "üõ∞Ô∏è",
    "üèÜ",
    "üéñÔ∏è",
    "üíé",
    "üëë",
    "üî•",
    "üé®",
    "üé≠",
    "üé™",
    "üé®",
  ]

  useEffect(() => {
    loadData()
  }, [])

  // FUN√á√ïES PARA REMO√á√ÉO
const loadUserItems = async (userId: string) => {
  if (!userId) return

  try {
    // Carregar figurinhas do usu√°rio
    const stickersQuery = query(collection(db, "stickers"), where("userId", "==", userId))
    const stickersSnapshot = await getDocs(stickersQuery)
    const stickers = stickersSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
      earnedAt: new Date(doc.data().earnedAt).toLocaleDateString('pt-BR')
    }))
    setUserStickers(stickers)

    // Carregar metas do usu√°rio
    const achievementsQuery = query(collection(db, "achievements"), where("userId", "==", userId))
    const achievementsSnapshot = await getDocs(achievementsQuery)
    const achievements = achievementsSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
      earnedAt: new Date(doc.data().earnedAt).toLocaleDateString('pt-BR')
    }))
    setUserAchievements(achievements)
  } catch (error) {
    console.error("Erro ao carregar itens do usu√°rio:", error)
  }
}

const handleRemoveSticker = async () => {
  if (!selectedItemToRemove) {
    alert("Por favor, selecione uma figurinha para remover.")
    return
  }

  if (!confirm("Tem certeza que deseja remover esta figurinha? Esta a√ß√£o n√£o pode ser desfeita.")) {
    return
  }

  try {
    const stickerToRemove = userStickers.find(s => s.id === selectedItemToRemove)
    if (!stickerToRemove) return

    // Remover figurinha do banco
    await deleteDoc(doc(db, "stickers", selectedItemToRemove))

    // Atualizar pontos do usu√°rio (subtrair)
    const categoryField = `categoryPoints.${stickerToRemove.category}`
    await updateDoc(doc(db, "users", selectedEmployeeForRemoval), {
      totalPoints: increment(-stickerToRemove.points),
      [categoryField]: increment(-stickerToRemove.points),
    })

    // Recarregar dados
    await loadUserItems(selectedEmployeeForRemoval)
    await loadData()

    setSelectedItemToRemove("")
    alert(`Figurinha removida com sucesso! (-${stickerToRemove.points} pontos)`)
  } catch (error) {
    console.error("Erro ao remover figurinha:", error)
    alert("Erro ao remover figurinha")
  }
}

const handleRemoveAchievement = async () => {
  if (!selectedItemToRemove) {
    alert("Por favor, selecione uma meta para remover.")
    return
  }

  if (!confirm("Tem certeza que deseja remover esta meta conquistada? Esta a√ß√£o n√£o pode ser desfeita.")) {
    return
  }

  try {
    // Remover meta do banco
    await deleteDoc(doc(db, "achievements", selectedItemToRemove))

    // Recarregar dados
    await loadUserItems(selectedEmployeeForRemoval)
    await loadData()

    setSelectedItemToRemove("")
    alert("Meta removida com sucesso!")
  } catch (error) {
    console.error("Erro ao remover meta:", error)
    alert("Erro ao remover meta")
  }
}

  const loadData = async () => {
    try {
      // Carregar colaboradores
      const usersSnapshot = await getDocs(collection(db, "users"))
      const employeesList = usersSnapshot.docs
        .map((doc) => ({ id: doc.id, ...doc.data() } as Employee))
        .filter((user) => user.role === "employee")
      setEmployees(employeesList)

      // Carregar metas customizadas
      const achievementsSnapshot = await getDocs(collection(db, "customAchievements"))
      const customAchievementsList = achievementsSnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      })) as CustomAchievement[]
      setCustomAchievements(customAchievementsList)
    } catch (error) {
      console.error("Erro ao carregar dados:", error)
    } finally {
      setLoading(false)
    }
  }

  const handleAddEmployee = async () => {
    // Valida√ß√£o
    if (!newEmployeeName?.trim() || !newEmployeeEmail?.trim()) {
      alert("Por favor, preencha todos os campos.")
      return
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(newEmployeeEmail.trim())) {
      alert("Email inv√°lido.")
      return
    }

    setLoading(true)

    try {
      const name = newEmployeeName.trim()
      const email = newEmployeeEmail.trim()
      
      console.log("üöÄ Criando colaborador:", { name, email })
      
      // Criar inst√¢ncia separada do Firebase Auth para n√£o deslogar o admin
      const secondaryApp = initializeApp({
        apiKey: "AIzaSyD995cU7-SuyTbAME9W8SMrloSvhWRLTbo",
        authDomain: "sistema-figuras.firebaseapp.com",
        projectId: "sistema-figuras",
        storageBucket: "sistema-figuras.firebasestorage.app",
        messagingSenderId: "110106643382",
        appId: "1:110106643382:web:23de36713a98f4a49a4f17",
      }, "secondary")
      
      const secondaryAuth = getAuth(secondaryApp)
      
      // Criar usu√°rio na inst√¢ncia secund√°ria (n√£o afeta a sess√£o do admin)
      const userCredential = await createUserWithEmailAndPassword(secondaryAuth, email, "senha123")
      const uid = userCredential.user.uid
      
      console.log("‚úÖ Usu√°rio criado:", uid)
      
      // Deslogar da inst√¢ncia secund√°ria para limpar
      await signOut(secondaryAuth)
      
      // Dados para salvar
              const userData = {
          name,
          email,
          role: "employee",
          totalPoints: 0,
          categoryPoints: initializeCategoryPoints(),
          createdAt: new Date().toISOString(),
        }

             // Salvar no Firestore (OBRIGAT√ìRIO para controle de pontos)
       await setDoc(doc(db, "users", uid), userData)
       console.log("‚úÖ Salvo no Firestore")

       // Verificar se foi salvo corretamente
       const checkDoc = await getDoc(doc(db, "users", uid))
       if (!checkDoc.exists()) {
         throw new Error("Falha ao salvar no Firestore - colaborador n√£o pode receber pontos")
       }

       // Recarregar dados do servidor para garantir sincroniza√ß√£o
       await loadData()
       
       // Limpar campos
       setNewEmployeeName("")
       setNewEmployeeEmail("")
       
       console.log("‚úÖ Colaborador adicionado e sincronizado")
       alert(`‚úÖ Colaborador "${name}" criado com sucesso!\nEmail: ${email}\nSenha: senha123\n\nO colaborador j√° pode receber figurinhas e pontos!`)
      
    } catch (error: any) {
      console.error("‚ùå Erro:", error)
      
      let msg = "Erro desconhecido"
      let instructions = ""
      
      if (error.code === "auth/email-already-in-use") {
        msg = "Email j√° est√° em uso"
        instructions = "Use um email diferente."
      } else if (error.code === "auth/invalid-email") {
        msg = "Email inv√°lido"
        instructions = "Verifique o formato do email."
      } else if (error.code === "auth/weak-password") {
        msg = "Senha muito fraca"
        instructions = "A senha padr√£o 'senha123' deveria funcionar."
      } else if (error.code === "permission-denied") {
        msg = "Erro de permiss√£o no Firestore"
        instructions = "SOLU√á√ÉO:\n1. Execute: npm run firestore:rules\n2. Copie o conte√∫do do arquivo firestore.rules\n3. Cole no Firebase Console ‚Üí Firestore ‚Üí Rules ‚Üí Publish"
      } else if (error.message?.includes("Falha ao salvar no Firestore")) {
        msg = "Colaborador n√£o foi salvo no banco de dados"
        instructions = "Verifique se as regras do Firestore est√£o configuradas corretamente."
      } else {
        msg = error.message || "Erro ao criar colaborador"
      }
      
      const fullMessage = instructions 
        ? `‚ùå Erro: ${msg}\n\n${instructions}`
        : `‚ùå Erro: ${msg}`
      
      alert(fullMessage)
    } finally {
      setLoading(false)
    }
  }

  const openEditEmployee = (employee: Employee) => {
    setEditingEmployee(employee)
    setEditEmployeeName(employee.name)
    setEditEmployeeEmail(employee.email)
    setEditEmployeePoints(employee.totalPoints.toString())
    
    // Carregar pontua√ß√µes por categoria
    const categoryPointsStr: {[key: string]: string} = {}
    if (employee.categoryPoints) {
      Object.keys(employee.categoryPoints).forEach(category => {
        categoryPointsStr[category] = employee.categoryPoints![category].toString()
      })
    } else {
      // Se n√£o existir, inicializar com zeros
      defaultCategories.forEach(category => {
        categoryPointsStr[category] = "0"
      })
    }
    setEditCategoryPoints(categoryPointsStr)
    setShowCategoryPoints(false)
  }

  const closeEditEmployee = () => {
    setEditingEmployee(null)
    setEditEmployeeName("")
    setEditEmployeeEmail("")
    setEditEmployeePoints("")
    setEditCategoryPoints({})
    setShowCategoryPoints(false)
  }

  const handleEditEmployee = async () => {
    if (!editingEmployee || !editEmployeeName.trim() || !editEmployeeEmail.trim()) {
      alert("Por favor, preencha todos os campos.")
      return
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(editEmployeeEmail.trim())) {
      alert("Email inv√°lido.")
      return
    }

    const newPoints = parseInt(editEmployeePoints) || 0
    if (newPoints < 0) {
      alert("Pontos n√£o podem ser negativos.")
      return
    }

    setLoading(true)

    try {
      console.log("üîÑ Editando colaborador:", editingEmployee.id)
      
      // Converter pontua√ß√µes por categoria de string para number
      const categoryPointsNum: {[key: string]: number} = {}
      let calculatedTotal = 0
      
      Object.keys(editCategoryPoints).forEach(category => {
        const points = parseInt(editCategoryPoints[category]) || 0
        categoryPointsNum[category] = points
        calculatedTotal += points
      })
      
      // Se o usu√°rio editou o total manualmente, usar esse valor
      // Sen√£o, usar a soma das categorias
      const finalTotalPoints = showCategoryPoints ? calculatedTotal : newPoints
      
      // Atualizar dados no Firestore
      await updateDoc(doc(db, "users", editingEmployee.id), {
        name: editEmployeeName.trim(),
        email: editEmployeeEmail.trim(),
        totalPoints: finalTotalPoints,
        categoryPoints: categoryPointsNum,
      })

      console.log("‚úÖ Colaborador atualizado no Firestore")

      // Recarregar dados
      await loadData()
      
      closeEditEmployee()
      
      alert(`‚úÖ Colaborador "${editEmployeeName.trim()}" atualizado com sucesso!`)
      
    } catch (error: any) {
      console.error("‚ùå Erro ao editar colaborador:", error)
      
      let msg = "Erro desconhecido"
      if (error.code === "permission-denied") {
        msg = "Erro de permiss√£o no Firestore"
      } else {
        msg = error.message || "Erro ao editar colaborador"
      }
      
      alert(`‚ùå Erro: ${msg}`)
    } finally {
      setLoading(false)
    }
  }

  const handleAddSticker = async () => {
    if (!selectedEmployee || !stickerPoints || !selectedCategory || !stickerQuantity) {
      alert("Por favor, preencha todos os campos.")
      return
    }

    try {
      const points = Number.parseInt(stickerPoints)
      const quantity = Number.parseInt(stickerQuantity)
      const totalPointsToAdd = points * quantity
      
      const stickerEmojis: Record<number, string> = {
        5: "‚≠ê",
        10: "üèÜ",
        15: "üéñÔ∏è",
        20: "üíé",
        25: "üëë",
        30: "üî•",
      }

      // Adicionar m√∫ltiplas figurinhas
      for (let i = 0; i < quantity; i++) {
        await addDoc(collection(db, "stickers"), {
          userId: selectedEmployee,
          points: points,
          emoji: stickerEmojis[points],
          category: selectedCategory,
          earnedAt: new Date().toISOString(),
        })
      }

      // Atualizar pontos totais e pontos da categoria espec√≠fica
      const categoryField = `categoryPoints.${selectedCategory}`
      await updateDoc(doc(db, "users", selectedEmployee), {
        totalPoints: increment(totalPointsToAdd),
        [categoryField]: increment(totalPointsToAdd),
      })

      setSelectedEmployee("")
      setStickerPoints("")
      setStickerQuantity("1")
      setSelectedCategory("")
      loadData()
      alert(`${quantity}x Figurinha de ${selectedCategory} adicionada com sucesso! (+${totalPointsToAdd} pontos)`)
    } catch (error) {
      console.error("Erro ao adicionar figurinha:", error)
      alert("Erro ao adicionar figurinha")
    }
  }

  const handleAddAchievement = async () => {
    if (!selectedEmployee || !selectedAchievement || !achievementQuantity) {
      alert("Por favor, preencha todos os campos.")
      return
    }

    try {
      const achievement = JSON.parse(selectedAchievement)
      const quantity = Number.parseInt(achievementQuantity)

      // Adicionar m√∫ltiplas metas
      for (let i = 0; i < quantity; i++) {
        await addDoc(collection(db, "achievements"), {
          userId: selectedEmployee,
          name: achievement.name,
          category: achievement.category,
          description: achievementDescription,
          image: achievement.image,
          earnedAt: new Date().toISOString(),
        })
      }

      setSelectedEmployee("")
      setSelectedCategory("")
      setSelectedAchievement("")
      setAchievementDescription("")
      setAchievementQuantity("1")
      alert(`${quantity}x Meta "${achievement.name}" adicionada com sucesso!`)
    } catch (error) {
      console.error("Erro ao adicionar meta:", error)
      alert("Erro ao adicionar meta")
    }
  }

  const handleCreateCustomAchievement = async () => {
    if (!newAchievementName || !newAchievementCategory || !newAchievementImage) return

    try {
      await addDoc(collection(db, "customAchievements"), {
        name: newAchievementName,
        category: newAchievementCategory,
        image: newAchievementImage,
        description: newAchievementDescription,
        createdAt: new Date().toISOString(),
      })

      setNewAchievementName("")
      setNewAchievementCategory("")
      setNewAchievementImage("")
      setNewAchievementDescription("")
      loadData()
      alert("Nova meta criada com sucesso!")
    } catch (error) {
      console.error("Erro ao criar meta:", error)
      alert("Erro ao criar meta")
    }
  }

  const handleDeleteCustomAchievement = async (achievementId: string) => {
    if (!confirm("Tem certeza que deseja excluir esta meta?")) return

    try {
      await deleteDoc(doc(db, "customAchievements", achievementId))
      loadData()
      alert("Meta exclu√≠da com sucesso!")
    } catch (error) {
      console.error("Erro ao excluir meta:", error)
      alert("Erro ao excluir meta")
    }
  }

  // Fun√ß√µes para remo√ß√£o de figurinhas e metas
  const loadUserItems = async (userId: string) => {
    if (!userId) return

    try {
      // Carregar figurinhas do usu√°rio
      const stickersQuery = query(collection(db, "stickers"), where("userId", "==", userId))
      const stickersSnapshot = await getDocs(stickersQuery)
      const stickers = stickersSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        earnedAt: new Date(doc.data().earnedAt).toLocaleDateString('pt-BR')
      }))
      setUserStickers(stickers)

      // Carregar metas do usu√°rio
      const achievementsQuery = query(collection(db, "achievements"), where("userId", "==", userId))
      const achievementsSnapshot = await getDocs(achievementsQuery)
      const achievements = achievementsSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        earnedAt: new Date(doc.data().earnedAt).toLocaleDateString('pt-BR')
      }))
      setUserAchievements(achievements)
    } catch (error) {
      console.error("Erro ao carregar itens do usu√°rio:", error)
    }
  }

  const handleRemoveSticker = async () => {
    if (!selectedItemToRemove) {
      alert("Por favor, selecione uma figurinha para remover.")
      return
    }

    if (!confirm("Tem certeza que deseja remover esta figurinha? Esta a√ß√£o n√£o pode ser desfeita.")) {
      return
    }

    try {
      const stickerToRemove = userStickers.find(s => s.id === selectedItemToRemove)
      if (!stickerToRemove) return

      // Remover figurinha do banco
      await deleteDoc(doc(db, "stickers", selectedItemToRemove))

      // Atualizar pontos do usu√°rio (subtrair)
      const categoryField = `categoryPoints.${stickerToRemove.category}`
      await updateDoc(doc(db, "users", selectedEmployeeForRemoval), {
        totalPoints: increment(-stickerToRemove.points),
        [categoryField]: increment(-stickerToRemove.points),
      })

      // Recarregar dados
      await loadUserItems(selectedEmployeeForRemoval)
      await loadData()

      setSelectedItemToRemove("")
      alert(`Figurinha removida com sucesso! (-${stickerToRemove.points} pontos)`)
    } catch (error) {
      console.error("Erro ao remover figurinha:", error)
      alert("Erro ao remover figurinha")
    }
  }

  const handleRemoveAchievement = async () => {
    if (!selectedItemToRemove) {
      alert("Por favor, selecione uma meta para remover.")
      return
    }

    if (!confirm("Tem certeza que deseja remover esta meta conquistada? Esta a√ß√£o n√£o pode ser desfeita.")) {
      return
    }

    try {
      // Remover meta do banco
      await deleteDoc(doc(db, "achievements", selectedItemToRemove))

      // Recarregar dados
      await loadUserItems(selectedEmployeeForRemoval)
      await loadData()

      setSelectedItemToRemove("")
      alert("Meta removida com sucesso!")
    } catch (error) {
      console.error("Erro ao remover meta:", error)
      alert("Erro ao remover meta")
    }
  }

  const handleLogout = async () => {
    await logout()
  }

  const allAchievements = [...defaultAchievements, ...customAchievements]

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-green-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Carregando painel...</p>
        </div>
      </div>
    )
  }

  return (
    <ProtectedRoute requiredRole="admin">
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-green-50">
        {/* Header */}
        <header className="bg-white shadow-sm border-b">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center h-16">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-gradient-to-br from-blue-600 to-green-600 rounded-full flex items-center justify-center">
                  <span className="text-white font-bold">A</span>
                </div>
                <div>
                  <h1 className="text-xl font-bold text-gray-900">Avalyst</h1>
                  <p className="text-sm text-gray-600">Painel Administrativo</p>
                </div>
              </div>
              <Button variant="outline" size="sm" onClick={handleLogout}>
                <LogOut className="w-4 h-4 mr-2" />
                Sair
              </Button>
            </div>
          </div>
        </header>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <Tabs defaultValue="actions" className="space-y-6">
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="actions">A√ß√µes R√°pidas</TabsTrigger>
              <TabsTrigger value="achievements">Gerenciar Metas</TabsTrigger>
              <TabsTrigger value="employees">Colaboradores</TabsTrigger>
              <TabsTrigger value="rankings">Rankings</TabsTrigger>
            </TabsList>

            {/* A√ß√µes R√°pidas */}
            <TabsContent value="actions">
              <div className="grid md:grid-cols-3 gap-6">
                {/* Adicionar Colaborador */}
                <Dialog>
                  <DialogTrigger asChild>
                    <Card className="cursor-pointer hover:shadow-md transition-shadow">
                      <CardContent className="flex items-center justify-center p-6">
                        <div className="text-center">
                          <Plus className="w-8 h-8 text-blue-600 mx-auto mb-2" />
                          <h3 className="font-semibold text-gray-900">Novo Colaborador</h3>
                          <p className="text-sm text-gray-600">Cadastrar novo usu√°rio</p>
                        </div>
                      </CardContent>
                    </Card>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Adicionar Novo Colaborador</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                      <Input
                        placeholder="Nome completo"
                        value={newEmployeeName}
                        onChange={(e) => setNewEmployeeName(e.target.value)}
                      />
                      <Input
                        type="email"
                        placeholder="Email"
                        value={newEmployeeEmail}
                        onChange={(e) => setNewEmployeeEmail(e.target.value)}
                      />
                      <p className="text-sm text-gray-600">Senha padr√£o: senha123</p>
                      <Button onClick={handleAddEmployee} className="w-full">
                        Adicionar Colaborador
                      </Button>
                    </div>
                  </DialogContent>
                </Dialog>

                {/* Adicionar Figurinha */}
                <Dialog>
                  <DialogTrigger asChild>
                    <Card className="cursor-pointer hover:shadow-md transition-shadow">
                      <CardContent className="flex items-center justify-center p-6">
                        <div className="text-center">
                          <Star className="w-8 h-8 text-yellow-600 mx-auto mb-2" />
                          <h3 className="font-semibold text-gray-900">Dar Figurinha</h3>
                          <p className="text-sm text-gray-600">Atribuir pontos</p>
                        </div>
                      </CardContent>
                    </Card>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Adicionar Figurinha</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                      <Select value={selectedEmployee} onValueChange={setSelectedEmployee}>
                        <SelectTrigger>
                          <SelectValue placeholder="Selecionar colaborador" />
                        </SelectTrigger>
                        <SelectContent>
                          {employees.map((employee) => (
                            <SelectItem key={employee.id} value={employee.id}>
                              {employee.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      
                      <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                        <SelectTrigger>
                          <SelectValue placeholder="Selecionar categoria" />
                        </SelectTrigger>
                        <SelectContent>
                          {defaultCategories.map((category) => (
                            <SelectItem key={category} value={category}>
                              <div className="flex items-center gap-2">
                                {category === "Vendas" && "üü¢"}
                                {category === "Recupera√ß√£o" && "üü†"}
                                {category === "Atualiza√ß√£o" && "üü£"}
                                {category === "Gal√°xia de reconhecimento" && "üü°"}
                                {category === "Pr√©-vendas" && "üîµ"}
                                <span>{category === "Gal√°xia de reconhecimento" ? "Reconhecimento" : category}</span>
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      
                      <Select value={stickerPoints} onValueChange={setStickerPoints}>
                        <SelectTrigger>
                          <SelectValue placeholder="Pontua√ß√£o da figurinha" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="5">‚≠ê 5 pontos</SelectItem>
                          <SelectItem value="10">üèÜ 10 pontos</SelectItem>
                          <SelectItem value="15">üéñÔ∏è 15 pontos</SelectItem>
                          <SelectItem value="20">üíé 20 pontos</SelectItem>
                          <SelectItem value="25">üëë 25 pontos</SelectItem>
                          <SelectItem value="30">üî• 30 pontos</SelectItem>
                        </SelectContent>
                      </Select>
                      
                      <div>
                        <label className="text-sm font-medium text-gray-700 mb-1 block">
                          Quantidade de figurinhas
                        </label>
                        <Select value={stickerQuantity} onValueChange={setStickerQuantity}>
                          <SelectTrigger>
                            <SelectValue placeholder="Quantidade" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="1">1 figurinha</SelectItem>
                            <SelectItem value="2">2 figurinhas</SelectItem>
                            <SelectItem value="3">3 figurinhas</SelectItem>
                            <SelectItem value="4">4 figurinhas</SelectItem>
                            <SelectItem value="5">5 figurinhas</SelectItem>
                            <SelectItem value="10">10 figurinhas</SelectItem>
                          </SelectContent>
                        </Select>
                        {stickerPoints && stickerQuantity && (
                          <p className="text-sm text-gray-600 mt-1">
                            Total: {Number.parseInt(stickerPoints) * Number.parseInt(stickerQuantity)} pontos
                          </p>
                        )}
                      </div>
                      
                      <Button onClick={handleAddSticker} className="w-full">
                        Adicionar Figurinha
                      </Button>
                    </div>
                  </DialogContent>
                </Dialog>

                {/* Adicionar Meta */}
                <Dialog>
                  <DialogTrigger asChild>
                    <Card className="cursor-pointer hover:shadow-md transition-shadow">
                      <CardContent className="flex items-center justify-center p-6">
                        <div className="text-center">
                          <Award className="w-8 h-8 text-green-600 mx-auto mb-2" />
                          <h3 className="font-semibold text-gray-900">Nova Meta</h3>
                          <p className="text-sm text-gray-600">Registrar conquista</p>
                        </div>
                      </CardContent>
                    </Card>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Registrar Meta Conquistada</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                      <Select value={selectedEmployee} onValueChange={setSelectedEmployee}>
                        <SelectTrigger>
                          <SelectValue placeholder="Selecionar colaborador" />
                        </SelectTrigger>
                        <SelectContent>
                          {employees.map((employee) => (
                            <SelectItem key={employee.id} value={employee.id}>
                              {employee.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>

                      <Select
                        value={selectedCategory}
                        onValueChange={(value) => {
                          setSelectedCategory(value)
                          setSelectedAchievement("")
                        }}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Selecionar categoria" />
                        </SelectTrigger>
                        <SelectContent>
                          {categories.map((category) => (
                            <SelectItem key={category} value={category}>
                              {category}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>

                      {selectedCategory && (
                        <Select value={selectedAchievement} onValueChange={setSelectedAchievement}>
                          <SelectTrigger>
                            <SelectValue placeholder="Selecionar meta" />
                          </SelectTrigger>
                          <SelectContent>
                            {allAchievements
                              .filter((achievement) => achievement.category === selectedCategory)
                              .map((achievement, index) => (
                                <SelectItem key={index} value={JSON.stringify(achievement)}>
                                  {achievement.image} {achievement.name}
                                </SelectItem>
                              ))}
                          </SelectContent>
                        </Select>
                      )}

                      <Textarea
                        placeholder="Descri√ß√£o adicional (opcional)"
                        value={achievementDescription}
                        onChange={(e) => setAchievementDescription(e.target.value)}
                      />
                      
                      <div>
                        <label className="text-sm font-medium text-gray-700 mb-1 block">
                          Quantidade de metas conquistadas
                        </label>
                        <Select value={achievementQuantity} onValueChange={setAchievementQuantity}>
                          <SelectTrigger>
                            <SelectValue placeholder="Quantidade" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="1">1 meta</SelectItem>
                            <SelectItem value="2">2 metas</SelectItem>
                            <SelectItem value="3">3 metas</SelectItem>
                            <SelectItem value="4">4 metas</SelectItem>
                            <SelectItem value="5">5 metas</SelectItem>
                            <SelectItem value="10">10 metas</SelectItem>
                          </SelectContent>
                        </Select>
                        {selectedAchievement && achievementQuantity && (
                          <p className="text-sm text-gray-600 mt-1">
                            Ser√° registrado {achievementQuantity}x a meta selecionada
                          </p>
                        )}
                      </div>
                      
                      <Button onClick={handleAddAchievement} className="w-full">
                        Registrar Meta
                      </Button>
                    </div>
                  </DialogContent>
                </Dialog>

                {/* Remover Figurinhas/Metas */}
                <Dialog>
                  <DialogTrigger asChild>
                    <Card className="cursor-pointer hover:shadow-md transition-shadow">
                      <CardContent className="flex items-center justify-center p-6">
                        <div className="text-center">
                          <Trash2 className="w-8 h-8 text-red-600 mx-auto mb-2" />
                          <h3 className="font-semibold text-gray-900">Remover Itens</h3>
                          <p className="text-sm text-gray-600">Corrigir erros</p>
                        </div>
                      </CardContent>
                    </Card>
                  </DialogTrigger>
                  <DialogContent className="max-w-2xl">
                    <DialogHeader>
                      <DialogTitle>Remover Figurinhas ou Metas</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                      <Select 
                        value={selectedEmployeeForRemoval} 
                        onValueChange={(value) => {
                          setSelectedEmployeeForRemoval(value)
                          setRemovalType("")
                          setSelectedItemToRemove("")
                          loadUserItems(value)
                        }}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Selecionar colaborador" />
                        </SelectTrigger>
                        <SelectContent>
                          {employees.map((employee) => (
                            <SelectItem key={employee.id} value={employee.id}>
                              {employee.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>

                      {selectedEmployeeForRemoval && (
                        <Select value={removalType} onValueChange={(value: "sticker" | "achievement") => {
                          setRemovalType(value)
                          setSelectedItemToRemove("")
                        }}>
                          <SelectTrigger>
                            <SelectValue placeholder="O que deseja remover?" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="sticker">üèÜ Figurinhas ({userStickers.length})</SelectItem>
                            <SelectItem value="achievement">üéØ Metas ({userAchievements.length})</SelectItem>
                          </SelectContent>
                        </Select>
                      )}

                      {removalType === "sticker" && userStickers.length > 0 && (
                        <div>
                          <label className="text-sm font-medium text-gray-700 mb-1 block">
                            Selecionar figurinha para remover
                          </label>
                          <Select value={selectedItemToRemove} onValueChange={setSelectedItemToRemove}>
                            <SelectTrigger>
                              <SelectValue placeholder="Escolher figurinha" />
                            </SelectTrigger>
                            <SelectContent>
                              {userStickers.map((sticker) => (
                                <SelectItem key={sticker.id} value={sticker.id}>
                                  <div className="flex items-center gap-2">
                                    <span>{sticker.emoji}</span>
                                    <span>{sticker.points} pontos</span>
                                    <span className="text-gray-500">({sticker.category})</span>
                                    <span className="text-xs text-gray-400">{sticker.earnedAt}</span>
                                  </div>
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          {selectedItemToRemove && (
                            <div className="mt-2 p-2 bg-red-50 rounded border border-red-200">
                              <p className="text-sm text-red-700">
                                ‚ö†Ô∏è Esta figurinha ser√° removida e os pontos ser√£o subtra√≠dos
                              </p>
                            </div>
                          )}
                        </div>
                      )}

                      {removalType === "achievement" && userAchievements.length > 0 && (
                        <div>
                          <label className="text-sm font-medium text-gray-700 mb-1 block">
                            Selecionar meta para remover
                          </label>
                          <Select value={selectedItemToRemove} onValueChange={setSelectedItemToRemove}>
                            <SelectTrigger>
                              <SelectValue placeholder="Escolher meta" />
                            </SelectTrigger>
                            <SelectContent>
                              {userAchievements.map((achievement) => (
                                <SelectItem key={achievement.id} value={achievement.id}>
                                  <div className="flex items-center gap-2">
                                    <span>{achievement.image}</span>
                                    <span>{achievement.name}</span>
                                    <span className="text-gray-500">({achievement.category})</span>
                                    <span className="text-xs text-gray-400">{achievement.earnedAt}</span>
                                  </div>
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          {selectedItemToRemove && (
                            <div className="mt-2 p-2 bg-red-50 rounded border border-red-200">
                              <p className="text-sm text-red-700">
                                ‚ö†Ô∏è Esta meta conquistada ser√° removida permanentemente
                              </p>
                            </div>
                          )}
                        </div>
                      )}

                      {removalType === "sticker" && userStickers.length === 0 && (
                        <p className="text-gray-500 text-center py-4">
                          Este colaborador n√£o possui figurinhas para remover
                        </p>
                      )}

                      {removalType === "achievement" && userAchievements.length === 0 && (
                        <p className="text-gray-500 text-center py-4">
                          Este colaborador n√£o possui metas para remover
                        </p>
                      )}

                      {selectedItemToRemove && (
                        <div className="flex gap-2">
                          {removalType === "sticker" && (
                            <Button 
                              onClick={handleRemoveSticker} 
                              variant="destructive" 
                              className="flex-1"
                            >
                              <Trash2 className="w-4 h-4 mr-2" />
                              Remover Figurinha
                            </Button>
                          )}
                          {removalType === "achievement" && (
                            <Button 
                              onClick={handleRemoveAchievement} 
                              variant="destructive" 
                              className="flex-1"
                            >
                              <Trash2 className="w-4 h-4 mr-2" />
                              Remover Meta
                            </Button>
                          )}
                          <Button 
                            onClick={() => {
                              setSelectedItemToRemove("")
                              setRemovalType("")
                              setSelectedEmployeeForRemoval("")
                            }}
                            variant="outline"
                            className="flex-1"
                          >
                            Cancelar
                          </Button>
                        </div>
                      )}
                    </div>
                  </DialogContent>
                </Dialog>
              </div>
            </TabsContent>

            {/* Gerenciar Metas */}
            <TabsContent value="achievements">
              <div className="space-y-6">
                {/* Criar Nova Meta */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Target className="w-5 h-5" />
                      Criar Nova Meta
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid md:grid-cols-2 gap-4">
                      <Input
                        placeholder="Nome da meta"
                        value={newAchievementName}
                        onChange={(e) => setNewAchievementName(e.target.value)}
                      />
                      <Select value={newAchievementCategory} onValueChange={setNewAchievementCategory}>
                        <SelectTrigger>
                          <SelectValue placeholder="Categoria" />
                        </SelectTrigger>
                        <SelectContent>
                          {defaultCategories.map((category) => (
                            <SelectItem key={category} value={category}>
                              <div className="flex items-center gap-2">
                                {category === "Vendas" && "üü¢"}
                                {category === "Recupera√ß√£o" && "üü†"}
                                {category === "Atualiza√ß√£o" && "üü£"}
                                {category === "Gal√°xia de reconhecimento" && "üü°"}
                                {category === "Pr√©-vendas" && "üîµ"}
                                <span>{category === "Gal√°xia de reconhecimento" ? "Reconhecimento" : category}</span>
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <Select value={newAchievementImage} onValueChange={setNewAchievementImage}>
                        <SelectTrigger>
                          <SelectValue placeholder="Emoji/√çcone" />
                        </SelectTrigger>
                        <SelectContent>
                          {emojiOptions.map((emoji) => (
                            <SelectItem key={emoji} value={emoji}>
                              {emoji} {emoji}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <div className="md:col-span-2">
                        <Textarea
                          placeholder="Descri√ß√£o da meta (opcional)"
                          value={newAchievementDescription}
                          onChange={(e) => setNewAchievementDescription(e.target.value)}
                        />
                      </div>
                      <div className="md:col-span-2">
                        <Button onClick={handleCreateCustomAchievement} className="w-full">
                          <Plus className="w-4 h-4 mr-2" />
                          Criar Meta
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Lista de Metas Customizadas */}
                <Card>
                  <CardHeader>
                    <CardTitle>Metas Customizadas ({customAchievements.length})</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {customAchievements.map((achievement) => (
                        <div
                          key={achievement.id}
                          className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
                        >
                          <div className="flex items-center gap-3">
                            <span className="text-2xl">{achievement.image}</span>
                            <div>
                              <h4 className="font-medium">{achievement.name}</h4>
                              <p className="text-sm text-gray-600">{achievement.category}</p>
                              {achievement.description && (
                                <p className="text-xs text-gray-500 mt-1">{achievement.description}</p>
                              )}
                            </div>
                          </div>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handleDeleteCustomAchievement(achievement.id)}
                            className="text-red-600 hover:text-red-700"
                          >
                            <Trash2 className="w-4 h-4" />
                          </Button>
                        </div>
                      ))}
                      {customAchievements.length === 0 && (
                        <p className="text-center text-gray-500 py-8">Nenhuma meta customizada criada ainda</p>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            {/* Lista de Colaboradores */}
            <TabsContent value="employees">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Users className="w-5 h-5" />
                    Colaboradores ({employees.length})
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="overflow-x-auto">
                    <table className="w-full">
                      <thead>
                        <tr className="border-b">
                          <th className="text-left py-3 px-4">Nome</th>
                          <th className="text-left py-3 px-4">Email</th>
                          <th className="text-center py-3 px-4">Total</th>
                          <th className="text-center py-3 px-4">Vendas</th>
                          <th className="text-center py-3 px-4">Recupera√ß√£o</th>
                          <th className="text-center py-3 px-4">Atualiza√ß√£o</th>
                          <th className="text-center py-3 px-4">Reconhecimento</th>
                          <th className="text-center py-3 px-4">Status</th>
                          <th className="text-center py-3 px-4">A√ß√µes</th>
                        </tr>
                      </thead>
                      <tbody>
                        {employees.map((employee) => (
                          <tr key={employee.id} className="border-b hover:bg-gray-50">
                            <td className="py-3 px-4 font-medium">{employee.name}</td>
                            <td className="py-3 px-4 text-gray-600">{employee.email}</td>
                            <td className="py-3 px-4 text-center">
                              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                {employee.totalPoints} pts
                              </span>
                            </td>
                            <td className="py-3 px-4 text-center">
                              <span className="text-xs font-medium text-green-600">
                                {employee.categoryPoints?.["Vendas"] || 0}
                              </span>
                            </td>
                            <td className="py-3 px-4 text-center">
                              <span className="text-xs font-medium text-orange-600">
                                {employee.categoryPoints?.["Recupera√ß√£o"] || 0}
                              </span>
                            </td>
                            <td className="py-3 px-4 text-center">
                              <span className="text-xs font-medium text-purple-600">
                                {employee.categoryPoints?.["Atualiza√ß√£o"] || 0}
                              </span>
                            </td>
                            <td className="py-3 px-4 text-center">
                              <span className="text-xs font-medium text-yellow-600">
                                {employee.categoryPoints?.["Gal√°xia de reconhecimento"] || 0}
                              </span>
                            </td>
                            <td className="py-3 px-4 text-center">
                              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                Ativo
                              </span>
                            </td>
                            <td className="py-3 px-4 text-center">
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => openEditEmployee(employee)}
                                className="h-8 w-8 p-0"
                              >
                                <Edit className="h-4 w-4" />
                              </Button>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Rankings por Categoria */}
            <TabsContent value="rankings">
              <div className="space-y-6">
                {/* Seletor de Categoria */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Trophy className="w-5 h-5 text-yellow-500" />
                      Rankings por Categoria
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex flex-wrap gap-2">
                      {defaultCategories.map((category) => (
                        <Button
                          key={category}
                          variant={selectedRankingCategory === category ? "default" : "outline"}
                          size="sm"
                          onClick={() => setSelectedRankingCategory(category)}
                          className="flex items-center gap-2"
                        >
                          {category === "Vendas" && "üü¢"}
                          {category === "Recupera√ß√£o" && "üü†"}
                          {category === "Atualiza√ß√£o" && "üü£"}
                          {category === "Gal√°xia de reconhecimento" && "üü°"}
                          {category === "Pr√©-vendas" && "üîµ"}
                          {category === "Gal√°xia de reconhecimento" ? "Reconhecimento" : category}
                        </Button>
                      ))}
                    </div>
                  </CardContent>
                </Card>

                {/* Ranking da Categoria Selecionada */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Crown className="w-5 h-5 text-yellow-500" />
                      Ranking - {selectedRankingCategory === "Gal√°xia de reconhecimento" ? "Reconhecimento" : selectedRankingCategory}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {getCategoryRanking(selectedRankingCategory).length > 0 ? (
                        getCategoryRanking(selectedRankingCategory).map((employee, index) => (
                          <div
                            key={employee.id}
                            className={`flex items-center justify-between p-4 rounded-lg border ${
                              index === 0 ? 'bg-yellow-50 border-yellow-200' :
                              index === 1 ? 'bg-gray-50 border-gray-200' :
                              index === 2 ? 'bg-orange-50 border-orange-200' :
                              'bg-white border-gray-100'
                            }`}
                          >
                            <div className="flex items-center gap-3">
                              <div className="flex items-center justify-center w-8 h-8 rounded-full font-bold text-sm">
                                {index === 0 && <Crown className="w-5 h-5 text-yellow-500" />}
                                {index === 1 && <Medal className="w-5 h-5 text-gray-500" />}
                                {index === 2 && <Medal className="w-5 h-5 text-orange-500" />}
                                {index > 2 && <span className="text-gray-600">{employee.position}¬∫</span>}
                              </div>
                              <div>
                                <p className="font-medium text-gray-900">{employee.name}</p>
                                <p className="text-sm text-gray-600">{employee.email}</p>
                              </div>
                            </div>
                            <div className="text-right">
                              <p className="text-lg font-bold text-gray-900">
                                {employee.categoryPoints} pts
                              </p>
                              <p className="text-xs text-gray-500">
                                {selectedRankingCategory === "Vendas" && "üü¢ Vendas"}
                                {selectedRankingCategory === "Recupera√ß√£o" && "üü† Recupera√ß√£o"}
                                {selectedRankingCategory === "Atualiza√ß√£o" && "üü£ Atualiza√ß√£o"}
                                {selectedRankingCategory === "Gal√°xia de reconhecimento" && "üü° Reconhecimento"}
                                {category === "Pr√©-vendas" && "üîµ"}
                              </p>
                            </div>
                          </div>
                        ))
                      ) : (
                        <div className="text-center py-8">
                          <Trophy className="w-12 h-12 text-gray-300 mx-auto mb-3" />
                          <p className="text-gray-500">
                            Nenhum colaborador possui pontos em {selectedRankingCategory === "Gal√°xia de reconhecimento" ? "Reconhecimento" : selectedRankingCategory} ainda
                          </p>
                          <p className="text-sm text-gray-400 mt-1">
                            Adicione figurinhas desta categoria para ver o ranking
                          </p>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>

                {/* Resumo Geral */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Star className="w-5 h-5 text-blue-500" />
                      Resumo Geral por Categoria
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4">
                      {defaultCategories.map((category) => {
                        const ranking = getCategoryRanking(category)
                        const totalPoints = ranking.reduce((sum, emp) => sum + emp.categoryPoints, 0)
                        const participantes = ranking.length
                        
                        return (
                          <div key={category} className="p-4 border rounded-lg">
                            <div className="flex items-center gap-2 mb-2">
                              {category === "Vendas" && "üü¢"}
                              {category === "Recupera√ß√£o" && "üü†"}
                              {category === "Atualiza√ß√£o" && "üü£"}
                              {category === "Gal√°xia de reconhecimento" && "üü°"}
                              {category === "Pr√©-vendas" && "üîµ"}
                              <span className="font-medium text-sm">
                                {category === "Gal√°xia de reconhecimento" ? "Reconhecimento" : category}
                              </span>
                            </div>
                            <div className="space-y-1">
                              <p className="text-2xl font-bold text-gray-900">{totalPoints}</p>
                              <p className="text-xs text-gray-600">pontos totais</p>
                              <p className="text-xs text-gray-500">{participantes} participantes</p>
                            </div>
                          </div>
                        )
                      })}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
          </Tabs>
        </div>

        {/* Modal de Edi√ß√£o de Colaborador */}
        {editingEmployee && (
          <Dialog open={!!editingEmployee} onOpenChange={closeEditEmployee}>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Editar Colaborador</DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Nome
                  </label>
                  <Input
                    placeholder="Nome completo"
                    value={editEmployeeName}
                    onChange={(e) => setEditEmployeeName(e.target.value)}
                    disabled={loading}
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Email
                  </label>
                  <Input
                    type="email"
                    placeholder="Email"
                    value={editEmployeeEmail}
                    onChange={(e) => setEditEmployeeEmail(e.target.value)}
                    disabled={loading}
                  />
                </div>
                
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <label className="block text-sm font-medium text-gray-700">
                      Pontua√ß√£o
                    </label>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={() => setShowCategoryPoints(!showCategoryPoints)}
                      disabled={loading}
                    >
                      {showCategoryPoints ? "Edi√ß√£o Simples" : "Editar por Categoria"}
                    </Button>
                  </div>
                  
                  {!showCategoryPoints ? (
                    <div>
                      <Input
                        type="number"
                        min="0"
                        placeholder="0"
                        value={editEmployeePoints}
                        onChange={(e) => setEditEmployeePoints(e.target.value)}
                        disabled={loading}
                      />
                      <p className="text-sm text-gray-500 mt-1">
                        Ajuste a pontua√ß√£o total do colaborador
                      </p>
                    </div>
                  ) : (
                    <div className="space-y-3">
                      <p className="text-sm text-gray-500">
                        Edite as pontua√ß√µes por categoria (o total ser√° calculado automaticamente)
                      </p>
                      
                      {defaultCategories.map((category) => (
                        <div key={category}>
                          <label className="block text-xs font-medium text-gray-600 mb-1">
                            {category === "Gal√°xia de reconhecimento" ? "Reconhecimento" : category}
                          </label>
                          <Input
                            type="number"
                            min="0"
                            placeholder="0"
                            value={editCategoryPoints[category] || "0"}
                            onChange={(e) => setEditCategoryPoints(prev => ({
                              ...prev,
                              [category]: e.target.value
                            }))}
                            disabled={loading}
                            className="text-sm"
                          />
                        </div>
                      ))}
                      
                      <div className="pt-2 border-t">
                        <p className="text-sm font-medium text-gray-700">
                          Total Calculado: {Object.values(editCategoryPoints).reduce((sum, val) => sum + (parseInt(val) || 0), 0)} pontos
                        </p>
                      </div>
                    </div>
                  )}
                </div>

                <div className="flex gap-2 pt-4">
                  <Button 
                    onClick={handleEditEmployee} 
                    disabled={loading}
                    className="flex-1"
                  >
                    {loading ? "Salvando..." : "Salvar Altera√ß√µes"}
                  </Button>
                  
                  <Button 
                    variant="outline" 
                    onClick={closeEditEmployee}
                    disabled={loading}
                  >
                    Cancelar
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        )}
      </div>
    </ProtectedRoute>
  )
}
üîç DUPLICATA ENCONTRADA E REMOVIDA!
Identifiquei o problema: voc√™ tem duas declara√ß√µes da fun√ß√£o loadUserItems no arquivo. Aqui est√° o arquivo corrigido:

‚úÖ ARQUIVO CORRIGIDO - DUPLICATA REMOVIDA
Aqui est√° o arquivo app/admin/page.tsx com a duplicata removida:

"use client"

import { useEffect, useState } from "react"
import { useAuth } from "@/lib/auth-context"
import { ProtectedRoute } from "@/components/protected-route"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { collection, getDocs, addDoc, doc, updateDoc, increment, deleteDoc, setDoc, getDoc, query, where } from "firebase/firestore"
import { createUserWithEmailAndPassword, signOut } from "firebase/auth"
import { initializeApp } from "firebase/app"
import { getAuth } from "firebase/auth"
import { db, auth } from "@/lib/firebase"
import { Users, Plus, Award, Star, LogOut, Target, Trash2, Edit, Trophy, Crown, Medal } from "lucide-react"

interface Employee {
  id: string
  name: string
  email: string
  totalPoints: number
  role: string
  categoryPoints?: {
    "Vendas": number
    "Recupera√ß√£o": number
    "Atualiza√ß√£o": number
    "Gal√°xia de reconhecimento": number
    "Pr√©-vendas":  number
    [key: string]: number // Para categorias customizadas
  }
}

interface CustomAchievement {
  id: string
  name: string
  category: string
  image: string
  description?: string
  createdAt: string
}

const defaultAchievements = [
  // Vendas
  { name: "Construir pr√©dio comercial - Maior faturamento m√™s", category: "Vendas", image: "üè¢" },
  { name: "Construir pr√©dio comercial - 2¬∫ maior faturamento m√™s", category: "Vendas", image: "üè¨" },
  { name: "Construir pr√©dio residencial - Maior % metas m√™s", category: "Vendas", image: "üè†" },
  { name: "Maior ticket m√©dio", category: "Vendas", image: "üí∞" },
  { name: "Captar terreno - Crescer % em contratos", category: "Vendas", image: "üèûÔ∏è" },
  { name: "A√ß√µes de relacionamento", category: "Vendas", image: "ü§ù" },
  { name: "A√ß√µes de marketing", category: "Vendas", image: "üìà" },
  { name: "Maior faturamento no trimestre", category: "Vendas", image: "üìä" },
  { name: "Maior percentual de metas no trimestre", category: "Vendas", image: "üéØ" },
  { name: "Reativar e converter", category: "Vendas", image: "üîÑ" },

  // Recupera√ß√£o
  { name: "Mestre de Negocia√ß√£o", category: "Recupera√ß√£o", image: "üéØ" },
  { name: "Efetividade das liga√ß√µes", category: "Recupera√ß√£o", image: "üìû" },
  { name: "Estrelas da Vez", category: "Recupera√ß√£o", image: "‚≠ê" },
  { name: "Resgate Hist√≥rico", category: "Recupera√ß√£o", image: "üìú" },
  { name: "Maior n√∫mero de horas em liga√ß√£o", category: "Recupera√ß√£o", image: "‚è∞" },
  { name: "Maior porcentagem de atingimento de metas", category: "Recupera√ß√£o", image: "üé™" },
  { name: "Trabalho em equipe", category: "Recupera√ß√£o", image: "üë•" },

  // Atualiza√ß√£o
  { name: "Corrida ao ouro", category: "Atualiza√ß√£o", image: "ü•á" },
  { name: "Top Performance Di√°ria", category: "Atualiza√ß√£o", image: "üöÄ" },
  { name: "Resgate hist√≥rico", category: "Atualiza√ß√£o", image: "üèõÔ∏è" },
  { name: "M√™s extraordin√°rio", category: "Atualiza√ß√£o", image: "üåü" },

  // Gal√°xia de reconhecimento
  { name: "Brilho no Atendimento", category: "Gal√°xia de reconhecimento", image: "‚ú®" },
  { name: "Estrela do Conhecimento", category: "Gal√°xia de reconhecimento", image: "üìö" },
  { name: "Cometa de Ouro", category: "Gal√°xia de reconhecimento", image: "‚òÑÔ∏è" },
  { name: "Supernova da Inova√ß√£o", category: "Gal√°xia de reconhecimento", image: "üí°" },
  { name: "Sat√©lite de conex√£o", category: "Gal√°xia de reconhecimento", image: "üõ∞Ô∏è" },
  { name: "Figurinha DunkLee", category: "Gal√°xia de reconhecimento", image: "üèÜ" },

   //Pr√©-vendas
  { name:"N√∫mero de Reuni√µes", category: "Pr√©-vendas", image: "üìÖ" },
  { name: "Supera√ß√£o da Meta de Faturamento", category: "Pr√©-vendas", image: "üí∞" },
]

const pointValues = [5, 10, 15, 20, 25, 30]

// Categorias padr√£o do sistema
const defaultCategories = ["Vendas", "Recupera√ß√£o", "Atualiza√ß√£o", "Gal√°xia de reconhecimento", "Pr√©-vendas"]

// Fun√ß√£o para inicializar pontua√ß√µes por categoria
const initializeCategoryPoints = () => {
  const points: { [key: string]: number } = {}
  defaultCategories.forEach(category => {
    points[category] = 0
  })
  return points
}

export default function AdminPage() {
  const { logout } = useAuth()
  const [employees, setEmployees] = useState<Employee[]>([])
  const [customAchievements, setCustomAchievements] = useState<CustomAchievement[]>([])
  const [loading, setLoading] = useState(true)

  // Estados para modais
  const [newEmployeeName, setNewEmployeeName] = useState("")
  const [newEmployeeEmail, setNewEmployeeEmail] = useState("")
  const [selectedEmployee, setSelectedEmployee] = useState("")
  const [stickerPoints, setStickerPoints] = useState("")
  const [stickerQuantity, setStickerQuantity] = useState("1")
  const [achievementDescription, setAchievementDescription] = useState("")
  const [achievementQuantity, setAchievementQuantity] = useState("1")
  const [selectedCategory, setSelectedCategory] = useState("")
  const [selectedAchievement, setSelectedAchievement] = useState("")

  // Estados para edi√ß√£o de colaborador
  const [editingEmployee, setEditingEmployee] = useState<Employee | null>(null)
  const [editEmployeeName, setEditEmployeeName] = useState("")
  const [editEmployeeEmail, setEditEmployeeEmail] = useState("")
  const [editEmployeePoints, setEditEmployeePoints] = useState("")
  const [editCategoryPoints, setEditCategoryPoints] = useState<{[key: string]: string}>({})
  const [showCategoryPoints, setShowCategoryPoints] = useState(false)
  
  // Estados para rankings
  const [selectedRankingCategory, setSelectedRankingCategory] = useState("Vendas")

  // Estados para remo√ß√£o
  const [selectedEmployeeForRemoval, setSelectedEmployeeForRemoval] = useState("")
  const [removalType, setRemovalType] = useState<"sticker" | "achievement" | "">("")
  const [userStickers, setUserStickers] = useState<any[]>([])
  const [userAchievements, setUserAchievements] = useState<any[]>([])
  const [selectedItemToRemove, setSelectedItemToRemove] = useState("")

  // Fun√ß√£o para obter ranking de uma categoria
  const getCategoryRanking = (category: string) => {
    return employees
      .filter(emp => emp.categoryPoints && emp.categoryPoints[category] > 0)
      .sort((a, b) => (b.categoryPoints?.[category] || 0) - (a.categoryPoints?.[category] || 0))
      .map((emp, index) => ({
        ...emp,
        position: index + 1,
        categoryPoints: emp.categoryPoints?.[category] || 0
      }))
  }

  // Estados para criar nova meta
  const [newAchievementName, setNewAchievementName] = useState("")
  const [newAchievementCategory, setNewAchievementCategory] = useState("")
  const [newAchievementImage, setNewAchievementImage] = useState("")
  const [newAchievementDescription, setNewAchievementDescription] = useState("")

  const categories = ["Vendas", "Recupera√ß√£o", "Atualiza√ß√£o", "Gal√°xia de reconhecimento", "Pr√©-vendas"]
  const emojiOptions = [
    "üè¢",
    "üè¨",
    "üè†",
    "üí∞",
    "üèûÔ∏è",
    "ü§ù",
    "üìà",
    "üìä",
    "üéØ",
    "üîÑ",
    "üìû",
    "‚≠ê",
    "üìú",
    "‚è∞",
    "üé™",
    "üë•",
    "ü•á",
    "üöÄ",
    "üèõÔ∏è",
    "üåü",
    "‚ú®",
    "üìö",
    "‚òÑÔ∏è",
    "üí°",
    "üõ∞Ô∏è",
    "üèÜ",
    "üéñÔ∏è",
    "üíé",
    "üëë",
    "üî•",
    "üé®",
    "üé≠",
    "üé™",
    "üé®",
  ]

  useEffect(() => {
    loadData()
  }, [])

  // FUN√á√ïES PARA REMO√á√ÉO - MANTIDA APENAS UMA VEZ
  const loadUserItems = async (userId: string) => {
    if (!userId) return

    try {
      // Carregar figurinhas do usu√°rio
      const stickersQuery = query(collection(db, "stickers"), where("userId", "==", userId))
      const stickersSnapshot = await getDocs(stickersQuery)
      const stickers = stickersSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        earnedAt: new Date(doc.data().earnedAt).toLocaleDateString('pt-BR')
      }))
      setUserStickers(stickers)

      // Carregar metas do usu√°rio
      const achievementsQuery = query(collection(db, "achievements"), where("userId", "==", userId))
      const achievementsSnapshot = await getDocs(achievementsQuery)
      const achievements = achievementsSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        earnedAt: new Date(doc.data().earnedAt).toLocaleDateString('pt-BR')
      }))
      setUserAchievements(achievements)
    } catch (error) {
      console.error("Erro ao carregar itens do usu√°rio:", error)
    }
  }

  const handleRemoveSticker = async () => {
    if (!selectedItemToRemove) {
      alert("Por favor, selecione uma figurinha para remover.")
      return
    }

    if (!confirm("Tem certeza que deseja remover esta figurinha? Esta a√ß√£o n√£o pode ser desfeita.")) {
      return
    }

    try {
      const stickerToRemove = userStickers.find(s => s.id === selectedItemToRemove)
      if (!stickerToRemove) return

      // Remover figurinha do banco
      await deleteDoc(doc(db, "stickers", selectedItemToRemove))

      // Atualizar pontos do usu√°rio (subtrair)
      const categoryField = `categoryPoints.${stickerToRemove.category}`
      await updateDoc(doc(db, "users", selectedEmployeeForRemoval), {
        totalPoints: increment(-stickerToRemove.points),
        [categoryField]: increment(-stickerToRemove.points),
      })

      // Recarregar dados
      await loadUserItems(selectedEmployeeForRemoval)
      await loadData()

      setSelectedItemToRemove("")
      alert(`Figurinha removida com sucesso! (-${stickerToRemove.points} pontos)`)
    } catch (error) {
      console.error("Erro ao remover figurinha:", error)
      alert("Erro ao remover figurinha")
    }
  }

  const handleRemoveAchievement = async () => {
    if (!selectedItemToRemove) {
      alert("Por favor, selecione uma meta para remover.")
      return
    }

    if (!confirm("Tem certeza que deseja remover esta meta conquistada? Esta a√ß√£o n√£o pode ser desfeita.")) {
      return
    }

    try {
      // Remover meta do banco
      await deleteDoc(doc(db, "achievements", selectedItemToRemove))

      // Recarregar dados
      await loadUserItems(selectedEmployeeForRemoval)
      await loadData()

      setSelectedItemToRemove("")
      alert("Meta removida com sucesso!")
    } catch (error) {
      console.error("Erro ao remover meta:", error)
      alert("Erro ao remover meta")
    }
  }

  const loadData = async () => {
    try {
      // Carregar colaboradores
      const usersSnapshot = await getDocs(collection(db, "users"))
      const employeesList = usersSnapshot.docs
        .map((doc) => ({ id: doc.id, ...doc.data() } as Employee))
        .filter((user) => user.role === "employee")
      setEmployees(employeesList)

      // Carregar metas customizadas
      const achievementsSnapshot = await getDocs(collection(db, "customAchievements"))
      const customAchievementsList = achievementsSnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      })) as CustomAchievement[]
      setCustomAchievements(customAchievementsList)
    } catch (error) {
      console.error("Erro ao carregar dados:", error)
    } finally {
      setLoading(false)
    }
  }

  const handleAddEmployee = async () => {
    // Valida√ß√£o
    if (!newEmployeeName?.trim() || !newEmployeeEmail?.trim()) {
      alert("Por favor, preencha todos os campos.")
      return
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(newEmployeeEmail.trim())) {
      alert("Email inv√°lido.")
      return
    }

    setLoading(true)

    try {
      const name = newEmployeeName.trim()
      const email = newEmployeeEmail.trim()
      
      console.log("üöÄ Criando colaborador:", { name, email })
      
      // Criar inst√¢ncia separada do Firebase Auth para n√£o deslogar o admin
      const secondaryApp = initializeApp({
        apiKey: "AIzaSyD995cU7-SuyTbAME9W8SMrloSvhWRLTbo",
        authDomain: "sistema-figuras.firebaseapp.com",
        projectId: "sistema-figuras",
        storageBucket: "sistema-figuras.firebasestorage.app",
        messagingSenderId: "110106643382",
        appId: "1:110106643382:web:23de36713a98f4a49a4f17",
      }, "secondary")
      
      const secondaryAuth = getAuth(secondaryApp)
      
      // Criar usu√°rio na inst√¢ncia secund√°ria (n√£o afeta a sess√£o do admin)
      const userCredential = await createUserWithEmailAndPassword(secondaryAuth, email, "senha123")
      const uid = userCredential.user.uid
      
      console.log("‚úÖ Usu√°rio criado:", uid)
      
      // Deslogar da inst√¢ncia secund√°ria para limpar
      await signOut(secondaryAuth)
      
      // Dados para salvar
      const userData = {
        name,
        email,
        role: "employee",
        totalPoints: 0,
        categoryPoints: initializeCategoryPoints(),
        createdAt: new Date().toISOString(),
      }

      // Salvar no Firestore (OBRIGAT√ìRIO para controle de pontos)
      await setDoc(doc(db, "users", uid), userData)
      console.log("‚úÖ Salvo no Firestore")

      // Verificar se foi salvo corretamente
      const checkDoc = await getDoc(doc(db, "users", uid))
      if (!checkDoc.exists()) {
        throw new Error("Falha ao salvar no Firestore - colaborador n√£o pode receber pontos")
      }

      // Recarregar dados do servidor para garantir sincroniza√ß√£o
      await loadData()
      
      // Limpar campos
      setNewEmployeeName("")
      setNewEmployeeEmail("")
      
      console.log("‚úÖ Colaborador adicionado e sincronizado")
      alert(`‚úÖ Colaborador "${name}" criado com sucesso!\nEmail: ${email}\nSenha: senha123\n\nO colaborador j√° pode receber figurinhas e pontos!`)
      
    } catch (error: any) {
      console.error("‚ùå Erro:", error)
      
      let msg = "Erro desconhecido"
      let instructions = ""
      
      if (error.code === "auth/email-already-in-use") {
        msg = "Email j√° est√° em uso"
        instructions = "Use um email diferente."
      } else if (error.code === "auth/invalid-email") {
        msg = "Email inv√°lido"
        instructions = "Verifique o formato do email."
      } else if (error.code === "auth/weak-password") {
        msg = "Senha muito fraca"
        instructions = "A senha padr√£o 'senha123' deveria funcionar."
      } else if (error.code === "permission-denied") {
        msg = "Erro de permiss√£o no Firestore"
        instructions = "SOLU√á√ÉO:\n1. Execute: npm run firestore:rules\n2. Copie o conte√∫do do arquivo firestore.rules\n3. Cole no Firebase Console ‚Üí Firestore ‚Üí Rules ‚Üí Publish"
      } else if (error.message?.includes("Falha ao salvar no Firestore")) {
        msg = "Colaborador n√£o foi salvo no banco de dados"
        instructions = "Verifique se as regras do Firestore est√£o configuradas corretamente."
      } else {
        msg = error.message || "Erro ao criar colaborador"
      }
      
      const fullMessage = instructions 
        ? `‚ùå Erro: ${msg}\n\n${instructions}`
        : `‚ùå Erro: ${msg}`
      
      alert(fullMessage)
    } finally {
      setLoading(false)
    }
  }

  const openEditEmployee = (employee: Employee) => {
    setEditingEmployee(employee)
    setEditEmployeeName(employee.name)
    setEditEmployeeEmail(employee.email)
    setEditEmployeePoints(employee.totalPoints.toString())
    
    // Carregar pontua√ß√µes por categoria
    const categoryPointsStr: {[key: string]: string} = {}
    if (employee.categoryPoints) {
      Object.keys(employee.categoryPoints).forEach(category => {
        categoryPointsStr[category] = employee.categoryPoints![category].toString()
      })
    } else {
      // Se n√£o existir, inicializar com zeros
      defaultCategories.forEach(category => {
        categoryPointsStr[category] = "0"
      })
    }
    setEditCategoryPoints(categoryPointsStr)
    setShowCategoryPoints(false)
  }

  const closeEditEmployee = () => {
    setEditingEmployee(null)
    setEditEmployeeName("")
    setEditEmployeeEmail("")
    setEditEmployeePoints("")
    setEditCategoryPoints({})
    setShowCategoryPoints(false)
  }

  const handleEditEmployee = async () => {
    if (!editingEmployee || !editEmployeeName.trim() || !editEmployeeEmail.trim()) {
      alert("Por favor, preencha todos os campos.")
      return
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(editEmployeeEmail.trim())) {
      alert("Email inv√°lido.")
      return
    }

    const newPoints = parseInt(editEmployeePoints) || 0
    if (newPoints < 0) {
      alert("Pontos n√£o podem ser negativos.")
      return
    }

    setLoading(true)

    try {
      console.log("üîÑ Editando colaborador:", editingEmployee.id)
      
      // Converter pontua√ß√µes por categoria de string para number
      const categoryPointsNum: {[key: string]: number} = {}
      let calculatedTotal = 0
      
      Object.keys(editCategoryPoints).forEach(category => {
        const points = parseInt(editCategoryPoints[category]) || 0
        categoryPointsNum[category] = points
        calculatedTotal += points
      })
      
      // Se o usu√°rio editou o total manualmente, usar esse valor
      // Sen√£o, usar a soma das categorias
      const finalTotalPoints = showCategoryPoints ? calculatedTotal : newPoints
      
      // Atualizar dados no Firestore
      await updateDoc(doc(db, "users", editingEmployee.id), {
        name: editEmployeeName.trim(),
        email: editEmployeeEmail.trim(),
        totalPoints: finalTotalPoints,
        categoryPoints: categoryPointsNum,
      })

      console.log("‚úÖ Colaborador atualizado no Firestore")

      // Recarregar dados
      await loadData()
      
      closeEditEmployee()
      
      alert(`‚úÖ Colaborador "${editEmployeeName.trim()}" atualizado com sucesso!`)
      
    } catch (error: any) {
      console.error("‚ùå Erro ao editar colaborador:", error)
      
      let msg = "Erro desconhecido"
      if (error.code === "permission-denied") {
        msg = "Erro de permiss√£o no Firestore"
      } else {
        msg = error.message || "Erro ao editar colaborador"
      }
      
      alert(`‚ùå Erro: ${msg}`)
    } finally {
      setLoading(false)
    }
  }

  const handleAddSticker = async () => {
    if (!selectedEmployee || !stickerPoints || !selectedCategory || !stickerQuantity) {
      alert("Por favor, preencha todos os campos.")
      return
    }

    try {
      const points = Number.parseInt(stickerPoints)
      const quantity = Number.parseInt(stickerQuantity)
      const totalPointsToAdd = points * quantity
      
      const stickerEmojis: Record<number, string> = {
        5: "‚≠ê",
        10: "üèÜ",
        15: "üéñÔ∏è",
        20: "üíé",
        25: "üëë",
        30: "üî•",
      }

      // Adicionar m√∫ltiplas figurinhas
      for (let i = 0; i < quantity; i++) {
        await addDoc(collection(db, "stickers"), {
          userId: selectedEmployee,
          points: points,
          emoji: stickerEmojis[points],
          category: selectedCategory,
          earnedAt: new Date().toISOString(),
        })
      }

      // Atualizar pontos totais e pontos da categoria espec√≠fica
      const categoryField = `categoryPoints.${selectedCategory}`
      await updateDoc(doc(db, "users", selectedEmployee), {
        totalPoints: increment(totalPointsToAdd),
        [categoryField]: increment(totalPointsToAdd),
      })

      setSelectedEmployee("")
      setStickerPoints("")
      setStickerQuantity("1")
      setSelectedCategory("")
      loadData()
      alert(`${quantity}x Figurinha de ${selectedCategory} adicionada com sucesso! (+${totalPointsToAdd} pontos)`)
    } catch (error) {
      console.error("Erro ao adicionar figurinha:", error)
      alert("Erro ao adicionar figurinha")
    }
  }

  const handleAddAchievement = async () => {
    if (!selectedEmployee || !selectedAchievement || !achievementQuantity) {
      alert("Por favor, preencha todos os campos.")
      return
    }

    try {
      const achievement = JSON.parse(selectedAchievement)
      const quantity = Number.parseInt(achievementQuantity)

      // Adicionar m√∫ltiplas metas
      for (let i = 0; i < quantity; i++) {
        await addDoc(collection(db, "achievements"), {
          userId: selectedEmployee,
          name: achievement.name,
          category: achievement.category,
          description: achievementDescription,
          image: achievement.image,
          earnedAt: new Date().toISOString(),
        })
      }

      setSelectedEmployee("")
      setSelectedCategory("")
      setSelectedAchievement("")
      setAchievementDescription("")
      setAchievementQuantity("1")
      alert(`${quantity}x Meta "${achievement.name}" adicionada com sucesso!`)
    } catch (error) {
      console.error("Erro ao adicionar meta:", error)
      alert("Erro ao adicionar meta")
    }
  }

  const handleCreateCustomAchievement = async () => {
    if (!newAchievementName || !newAchievementCategory || !newAchievementImage) return

    try {
      await addDoc(collection(db, "customAchievements"), {
        name: newAchievementName,
        category: newAchievementCategory,
        image: newAchievementImage,
        description: newAchievementDescription,
        createdAt: new Date().toISOString(),
      })

      setNewAchievementName("")
      setNewAchievementCategory("")
      setNewAchievementImage("")
      setNewAchievementDescription("")
      loadData()
      alert("Nova meta criada com sucesso!")
    } catch (error) {
      console.error("Erro ao criar meta:", error)
      alert("Erro ao criar meta")
    }
  }

  const handleDeleteCustomAchievement = async (achievementId: string) => {
    if (!confirm("Tem certeza que deseja excluir esta meta?")) return

    try {
      await deleteDoc(doc(db, "customAchievements", achievementId))
      loadData()
      alert("Meta exclu√≠da com sucesso!")
    } catch (error) {
      console.error("Erro ao excluir meta:", error)
      alert("Erro ao excluir meta")
    }
  }

  const handleLogout = async () => {
    await logout()
  }

  const allAchievements = [...defaultAchievements, ...customAchievements]

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-green-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Carregando painel...</p>
        </div>
      </div>
    )
  }

  return (
    <ProtectedRoute requiredRole="admin">
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-green-50">
        {/* Header */}
        <header className="bg-white shadow-sm border-b">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center h-16">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-gradient-to-br from-blue-600 to-green-600 rounded-full flex items-center justify-center">
                  <span className="text-white font-bold">A</span>
                </div>
                <div>
                  <h1 className="text-xl font-bold text-gray-900">Avalyst</h1>
                  <p className="text-sm text-gray-600">Painel Administrativo</p>
                </div>
              </div>
              <Button variant="outline" size="sm" onClick={handleLogout}>
                <LogOut className="w-4 h-4 mr-2" />
                Sair
              </Button>
            </div>
          </div>
        </header>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <Tabs defaultValue="actions" className="space-y-6">
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="actions">A√ß√µes R√°pidas</TabsTrigger>
              <TabsTrigger value="achievements">Gerenciar Metas</TabsTrigger>
              <TabsTrigger value="employees">Colaboradores</TabsTrigger>
              <TabsTrigger value="rankings">Rankings</TabsTrigger>
            </TabsList>

            {/* A√ß√µes R√°pidas */}
            <TabsContent value="actions">
              <div className="grid md:grid-cols-3 gap-6">
                {/* Adicionar Colaborador */}
                <Dialog>
                  <DialogTrigger asChild>
                    <Card className="cursor-pointer hover:shadow-md transition-shadow">
                      <CardContent className="flex items-center justify-center p-6">
                        <div className="text-center">
                          <Plus className="w-8 h-8 text-blue-600 mx-auto mb-2" />
                          <h3 className="font-semibold text-gray-900">Novo Colaborador</h3>
                          <p className="text-sm text-gray-600">Cadastrar novo usu√°rio</p>
                        </div>
                      </CardContent>
                    </Card>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Adicionar Novo Colaborador</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                      <Input
                        placeholder="Nome completo"
                        value={newEmployeeName}
                        onChange={(e) => setNewEmployeeName(e.target.value)}
                      />
                      <Input
                        type="email"
                        placeholder="Email"
                        value={newEmployeeEmail}
                        onChange={(e) => setNewEmployeeEmail(e.target.value)}
                      />
                      <p className="text-sm text-gray-600">Senha padr√£o: senha123</p>
                      <Button onClick={handleAddEmployee} className="w-full">
                        Adicionar Colaborador
                      </Button>
                    </div>
                  </DialogContent>
                </Dialog>

                {/* Adicionar Figurinha */}
                <Dialog>
                  <DialogTrigger asChild>
                    <Card className="cursor-pointer hover:shadow-md transition-shadow">
                      <CardContent className="flex items-center justify-center p-6">
                        <div className="text-center">
                          <Star className="w-8 h-8 text-yellow-600 mx-auto mb-2" />
                          <h3 className="font-semibold text-gray-900">Dar Figurinha</h3>
                          <p className="text-sm text-gray-600">Atribuir pontos</p>
                        </div>
                      </CardContent>
                    </Card>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Adicionar Figurinha</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                      <Select value={selectedEmployee} onValueChange={setSelectedEmployee}>
                        <SelectTrigger>
                          <SelectValue placeholder="Selecionar colaborador" />
                        </SelectTrigger>
                        <SelectContent>
                          {employees.map((employee) => (
                            <SelectItem key={employee.id} value={employee.id}>
                              {employee.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      
                      <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                        <SelectTrigger>
                          <SelectValue placeholder="Selecionar categoria" />
                        </SelectTrigger>
                        <SelectContent>
                          {defaultCategories.map((category) => (
                            <SelectItem key={category} value={category}>
                              <div className="flex items-center gap-2">
                                {category === "Vendas" && "üü¢"}
                                {category === "Recupera√ß√£o" && "üü†"}
                                {category === "Atualiza√ß√£o" && "üü£"}
                                {category === "Gal√°xia de reconhecimento" && "üü°"}
                                {category === "Pr√©-vendas" && "üîµ"}
                                <span>{category === "Gal√°xia de reconhecimento" ? "Reconhecimento" : category}</span>
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      
                      <Select value={stickerPoints} onValueChange={setStickerPoints}>
                        <SelectTrigger>
                          <SelectValue placeholder="Pontua√ß√£o da figurinha" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="5">‚≠ê 5 pontos</SelectItem>
                          <SelectItem value="10">üèÜ 10 pontos</SelectItem>
                          <SelectItem value="15">üéñÔ∏è 15 pontos</SelectItem>
                          <SelectItem value="20">üíé 20 pontos</SelectItem>
                          <SelectItem value="25">üëë 25 pontos</SelectItem>
                          <SelectItem value="30">üî• 30 pontos</SelectItem>
                        </SelectContent>
                      </Select>
                      
                      <div>
                        <label className="text-sm font-medium text-gray-700 mb-1 block">
                          Quantidade de figurinhas
                        </label>
                        <Select value={stickerQuantity} onValueChange={setStickerQuantity}>
                          <SelectTrigger>
                            <SelectValue placeholder="Quantidade" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="1">1 figurinha</SelectItem>
                            <SelectItem value="2">2 figurinhas</SelectItem>
                            <SelectItem value="3">3 figurinhas</SelectItem>
                            <SelectItem value="4">4 figurinhas</SelectItem>
                            <SelectItem value="5">5 figurinhas</SelectItem>
                            <SelectItem value="10">10 figurinhas</SelectItem>
                          </SelectContent>
                        </Select>
                        {stickerPoints && stickerQuantity && (
                          <p className="text-sm text-gray-600 mt-1">
                            Total: {Number.parseInt(stickerPoints) * Number.parseInt(stickerQuantity)} pontos
                          </p>
                        )}
                      </div>
                      
                      <Button onClick={handleAddSticker} className="w-full">
                        Adicionar Figurinha
                      </Button>
                    </div>
                  </DialogContent>
                </Dialog>

                {/* Adicionar Meta */}
                <Dialog>
                  <DialogTrigger asChild>
                    <Card className="cursor-pointer hover:shadow-md transition-shadow">
                      <CardContent className="flex items-center justify-center p-6">
                        <div className="text-center">
                          <Award className="w-8 h-8 text-green-600 mx-auto mb-2" />
                          <h3 className="font-semibold text-gray-900">Nova Meta</h3>
                          <p className="text-sm text-gray-600">Registrar conquista</p>
                        </div>
                      </CardContent>
                    </Card>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Registrar Meta Conquistada</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                      <Select value={selectedEmployee} onValueChange={setSelectedEmployee}>
                        <SelectTrigger>
                          <SelectValue placeholder="Selecionar colaborador" />
                        </SelectTrigger>
                        <SelectContent>
                          {employees.map((employee) => (
                            <SelectItem key={employee.id} value={employee.id}>
                              {employee.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>

                      <Select
                        value={selectedCategory}
                        onValueChange={(value) => {
                          setSelectedCategory(value)
                          setSelectedAchievement("")
                        }}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Selecionar categoria" />
                        </SelectTrigger>
                        <SelectContent>
                          {categories.map((category) => (
                            <SelectItem key={category} value={category}>
                              {category}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>

                      {selectedCategory && (
                        <Select value={selectedAchievement} onValueChange={setSelectedAchievement}>
                          <SelectTrigger>
                            <SelectValue placeholder="Selecionar meta" />
                          </SelectTrigger>
                          <SelectContent>
                            {allAchievements
                              .filter((achievement) => achievement.category === selectedCategory)
                              .map((achievement, index) => (
                                <SelectItem key={index} value={JSON.stringify(achievement)}>
                                  {achievement.image} {achievement.name}
                                </SelectItem>
                              ))}
                          </SelectContent>
                        </Select>
                      )}

                      <Textarea
                        placeholder="Descri√ß√£o adicional (opcional)"
                        value={achievementDescription}
                        onChange={(e) => setAchievementDescription(e.target.value)}
                      />
                      
                      <div>
                        <label className="text-sm font-medium text-gray-700 mb-1 block">
                          Quantidade de metas conquistadas
                        </label>
                        <Select value={achievementQuantity} onValueChange={setAchievementQuantity}>
                          <SelectTrigger>
                            <SelectValue placeholder="Quantidade" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="1">1 meta</SelectItem>
                            <SelectItem value="2">2 metas</SelectItem>
                            <SelectItem value="3">3 metas</SelectItem>
                            <SelectItem value="4">4 metas</SelectItem>
                            <SelectItem value="5">5 metas</SelectItem>
                            <SelectItem value="10">10 metas</SelectItem>
                          </SelectContent>
                        </Select>
                        {selectedAchievement && achievementQuantity && (
                          <p className="text-sm text-gray-600 mt-1">
                            Ser√° registrado {achievementQuantity}x a meta selecionada
                          </p>
                        )}
                      </div>
                      
                      <Button onClick={handleAddAchievement} className="w-full">
                        Registrar Meta
                      </Button>
                    </div>
                  </DialogContent>
                </Dialog>

                {/* Remover Figurinhas/Metas */}
                <Dialog>
                  <DialogTrigger asChild>
                    <Card className="cursor-pointer hover:shadow-md transition-shadow">
                      <CardContent className="flex items-center justify-center p-6">
                        <div className="text-center">
                          <Trash2 className="w-8 h-8 text-red-600 mx-auto mb-2" />
                          <h3 className="font-semibold text-gray-900">Remover Itens</h3>
                          <p className="text-sm text-gray-600">Corrigir erros</p>
                        </div>
                      </CardContent>
                    </Card>
                  </DialogTrigger>
                  <DialogContent className="max-w-2xl">
                    <DialogHeader>
                      <DialogTitle>Remover Figurinhas ou Metas</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                      <Select 
                        value={selectedEmployeeForRemoval} 
                        onValueChange={(value) => {
                          setSelectedEmployeeForRemoval(value)
                          setRemovalType("")
                          setSelectedItemToRemove("")
                          loadUserItems(value)
                        }}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Selecionar colaborador" />
                        </SelectTrigger>
                        <SelectContent>
                          {employees.map((employee) => (
                            <SelectItem key={employee.id} value={employee.id}>
                              {employee.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>

                      {selectedEmployeeForRemoval && (
                        <Select value={removalType} onValueChange={(value: "sticker" | "achievement") => {
                          setRemovalType(value)
                          setSelectedItemToRemove("")
                        }}>
                          <SelectTrigger>
                            <SelectValue placeholder="O que deseja remover?" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="sticker">üèÜ Figurinhas ({userStickers.length})</SelectItem>
                            <SelectItem value="achievement">üéØ Metas ({userAchievements.length})</SelectItem>
                          </SelectContent>
                        </Select>
                      )}

                      {removalType === "sticker" && userStickers.length > 0 && (
                        <div>
                          <label className="text-sm font-medium text-gray-700 mb-1 block">
                            Selecionar figurinha para remover
                          </label>
                          <Select value={selectedItemToRemove} onValueChange={setSelectedItemToRemove}>
                            <SelectTrigger>
                              <SelectValue placeholder="Escolher figurinha" />
                            </SelectTrigger>
                            <SelectContent>
                              {userStickers.map((sticker) => (
                                <SelectItem key={sticker.id} value={sticker.id}>
                                  <div className="flex items-center gap-2">
                                    <span>{sticker.emoji}</span>
                                    <span>{sticker.points} pontos</span>
                                    <span className="text-gray-500">({sticker.category})</span>
                                    <span className="text-xs text-gray-400">{sticker.earnedAt}</span>
                                  </div>
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          {selectedItemToRemove && (
                            <div className="mt-2 p-2 bg-red-50 rounded border border-red-200">
                              <p className="text-sm text-red-700">
                                ‚ö†Ô∏è Esta figurinha ser√° removida e os pontos ser√£o subtra√≠dos
                              </p>
                            </div>
                          )}
                        </div>
                      )}

                      {removalType === "achievement" && userAchievements.length > 0 && (
                        <div>
                          <label className="text-sm font-medium text-gray-700 mb-1 block">
                            Selecionar meta para remover
                          </label>
                          <Select value={selectedItemToRemove} onValueChange={setSelectedItemToRemove}>
                            <SelectTrigger>
                              <SelectValue placeholder="Escolher meta" />
                            </SelectTrigger>
                            <SelectContent>
                              {userAchievements.map((achievement) => (
                                <SelectItem key={achievement.id} value={achievement.id}>
                                  <div className="flex items-center gap-2">
                                    <span>{achievement.image}</span>
                                    <span>{achievement.name}</span>
                                    <span className="text-gray-500">({achievement.category})</span>
                                    <span className="text-xs text-gray-400">{achievement.earnedAt}</span>
                                  </div>
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          {selectedItemToRemove && (
                            <div className="mt-2 p-2 bg-red-50 rounded border border-red-200">
                              <p className="text-sm text-red-700">
                                ‚ö†Ô∏è Esta meta conquistada ser√° removida permanentemente
                              </p>
                            </div>
                          )}
                        </div>
                      )}

                      {removalType === "sticker" && userStickers.length === 0 && (
                        <p className="text-gray-500 text-center py-4">
                          Este colaborador n√£o possui figurinhas para remover
                        </p>
                      )}

                      {removalType === "achievement" && userAchievements.length === 0 && (
                        <p className="text-gray-500 text-center py-4">
                          Este colaborador n√£o possui metas para remover
                        </p>
                      )}

                      {selectedItemToRemove && (
                        <div className="flex gap-2">
                          {removalType === "sticker" && (
                            <Button 
                              onClick={handleRemoveSticker} 
                              variant="destructive" 
                              className="flex-1"
                            >
                              <Trash2 className="w-4 h-4 mr-2" />
                              Remover Figurinha
                            </Button>
                          )}
                          {removalType === "achievement" && (
                            <Button 
                              onClick={handleRemoveAchievement} 
                              variant="destructive" 
                              className="flex-1"
                            >
                              <Trash2 className="w-4 h-4 mr-2" />
                              Remover Meta
                            </Button>
                          )}
                          <Button 
                            onClick={() => {
                              setSelectedItemToRemove("")
                              setRemovalType("")
                              setSelectedEmployeeForRemoval("")
                            }}
                            variant="outline"
                            className="flex-1"
                          >
                            Cancelar
                          </Button>
                        </div>
                      )}
                    </div>
                  </DialogContent>
                </Dialog>
              </div>
            </TabsContent>

            {/* Gerenciar Metas */}
            <TabsContent value="achievements">
              <div className="space-y-6">
                {/* Criar Nova Meta */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Target className="w-5 h-5" />
                      Criar Nova Meta
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid md:grid-cols-2 gap-4">
                      <Input
                        placeholder="Nome da meta"
                        value={newAchievementName}
                        onChange={(e) => setNewAchievementName(e.target.value)}
                      />
                      <Select value={newAchievementCategory} onValueChange={setNewAchievementCategory}>
                        <SelectTrigger>
                          <SelectValue placeholder="Categoria" />
                        </SelectTrigger>
                        <SelectContent>
                          {defaultCategories.map((category) => (
                            <SelectItem key={category} value={category}>
                              <div className="flex items-center gap-2">
                                {category === "Vendas" && "üü¢"}
                                {category === "Recupera√ß√£o" && "üü†"}
                                {category === "Atualiza√ß√£o" && "üü£"}
                                {category === "Gal√°xia de reconhecimento" && "üü°"}
                                {category === "Pr√©-vendas" && "üîµ"}
                                <span>{category === "Gal√°xia de reconhecimento" ? "Reconhecimento" : category}</span>
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <Select value={newAchievementImage} onValueChange={setNewAchievementImage}>
                        <SelectTrigger>
                          <SelectValue placeholder="Emoji/√çcone" />
                        </SelectTrigger>
                        <SelectContent>
                          {emojiOptions.map((emoji) => (
                            <SelectItem key={emoji} value={emoji}>
                              {emoji} {emoji}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <div className="md:col-span-2">
                        <Textarea
                          placeholder="Descri√ß√£o da meta (opcional)"
                          value={newAchievementDescription}
                          onChange={(e) => setNewAchievementDescription(e.target.value)}
                        />
                      </div>
                      <div className="md:col-span-2">
                        <Button onClick={handleCreateCustomAchievement} className="w-full">
                          <Plus className="w-4 h-4 mr-2" />
                          Criar Meta
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Lista de Metas Customizadas */}
                <Card>
                  <CardHeader>
                    <CardTitle>Metas Customizadas ({customAchievements.length})</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {customAchievements.map((achievement) => (
                        <div
                          key={achievement.id}
                          className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
                        >
                          <div className="flex items-center gap-3">
                            <span className="text-2xl">{achievement.image}</span>
                            <div>
                              <h4 className="font-medium">{achievement.name}</h4>
                              <p className="text-sm text-gray-600">{achievement.category}</p>
                              {achievement.description && (
                                <p className="text-xs text-gray-500 mt-1">{achievement.description}</p>
                              )}
                            </div>
                          </div>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handleDeleteCustomAchievement(achievement.id)}
                            className="text-red-600 hover:text-red-700"
                          >
                            <Trash2 className="w-4 h-4" />
                          </Button>
                        </div>
                      ))}
                      {customAchievements.length === 0 && (
                        <p className="text-center text-gray-500 py-8">Nenhuma meta customizada criada ainda</p>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            {/* Lista de Colaboradores */}
            <TabsContent value="employees">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Users className="w-5 h-5" />
                    Colaboradores ({employees.length})
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="overflow-x-auto">
                    <table className="w-full">
                      <thead>
                        <tr className="border-b">
                          <th className="text-left py-3 px-4">Nome</th>
                          <th className="text-left py-3 px-4">Email</th>
                          <th className="text-center py-3 px-4">Total</th>
                          <th className="text-center py-3 px-4">Vendas</th>
                          <th className="text-center py-3 px-4">Recupera√ß√£o</th>
                          <th className="text-center py-3 px-4">Atualiza√ß√£o</th>
                          <th className="text-center py-3 px-4">Reconhecimento</th>
                          <th className="text-center py-3 px-4">Pr√©-vendas</th>
                          <th className="text-center py-3 px-4">Status</th>
                          <th className="text-center py-3 px-4">A√ß√µes</th>
                        </tr>
                      </thead>
                      <tbody>
                        {employees.map((employee) => (
                          <tr key={employee.id} className="border-b hover:bg-gray-50">
                            <td className="py-3 px-4 font-medium">{employee.name}</td>
                            <td className="py-3 px-4 text-gray-600">{employee.email}</td>
                            <td className="py-3 px-4 text-center">
                              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                {employee.totalPoints} pts
                              </span>
                            </td>
                            <td className="py-3 px-4 text-center">
                              <span className="text-xs font-medium text-green-600">
                                {employee.categoryPoints?.["Vendas"] || 0}
                              </span>
                            </td>
                            <td className="py-3 px-4 text-center">
                              <span className="text-xs font-medium text-orange-600">
                                {employee.categoryPoints?.["Recupera√ß√£o"] || 0}
                              </span>
                            </td>
                            <td className="py-3 px-4 text-center">
                              <span className="text-xs font-medium text-purple-600">
                                {employee.categoryPoints?.["Atualiza√ß√£o"] || 0}
                              </span>
                            </td>
                            <td className="py-3 px-4 text-center">
                              <span className="text-xs font-medium text-yellow-600">
                                {employee.categoryPoints?.["Gal√°xia de reconhecimento"] || 0}
                              </span>
                            </td>
                            <td className="py-3 px-4 text-center">
                              <span className="text-xs font-medium text-blue-600">
                                {employee.categoryPoints?.["Pr√©-vendas"] || 0}
                              </span>
                            </td>
                            <td className="py-3 px-4 text-center">
                              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                Ativo
                              </span>
                            </td>
                            <td className="py-3 px-4 text-center">
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => openEditEmployee(employee)}
                                className="h-8 w-8 p-0"
                              >
                                <Edit className="h-4 w-4" />
                              </Button>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Rankings por Categoria */}
            <TabsContent value="rankings">
              <div className="space-y-6">
                {/* Seletor de Categoria */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Trophy className="w-5 h-5 text-yellow-500" />
                      Rankings por Categoria
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex flex-wrap gap-2">
                      {defaultCategories.map((category) => (
                        <Button
                          key={category}
                          variant={selectedRankingCategory === category ? "default" : "outline"}
                          size="sm"
                          onClick={() => setSelectedRankingCategory(category)}
                          className="flex items-center gap-2"
                        >
                          {category === "Vendas" && "üü¢"}
                          {category === "Recupera√ß√£o" && "üü†"}
                          {category === "Atualiza√ß√£o" && "üü£"}
                          {category === "Gal√°xia de reconhecimento" && "üü°"}
                          {category === "Pr√©-vendas" && "üîµ"}
                          {category === "Gal√°xia de reconhecimento" ? "Reconhecimento" : category}
                        </Button>
                      ))}
                    </div>
                  </CardContent>
                </Card>

                {/* Ranking da Categoria Selecionada */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Crown className="w-5 h-5 text-yellow-500" />
                      Ranking - {selectedRankingCategory === "Gal√°xia de reconhecimento" ? "Reconhecimento" : selectedRankingCategory}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {getCategoryRanking(selectedRankingCategory).length > 0 ? (
                        getCategoryRanking(selectedRankingCategory).map((employee, index) => (
                          <div
                            key={employee.id}
                            className={`flex items-center justify-between p-4 rounded-lg border ${
                              index === 0 ? 'bg-yellow-50 border-yellow-200' :
                              index === 1 ? 'bg-gray-50 border-gray-200' :
                              index === 2 ? 'bg-orange-50 border-orange-200' :
                              'bg-white border-gray-100'
                            }`}
                          >
                            <div className="flex items-center gap-3">
                              <div className="flex items-center justify-center w-8 h-8 rounded-full font-bold text-sm">
                                {index === 0 && <Crown className="w-5 h-5 text-yellow-500" />}
                                {index === 1 && <Medal className="w-5 h-5 text-gray-500" />}
                                {index === 2 && <Medal className="w-5 h-5 text-orange-500" />}
                                {index > 2 && <span className="text-gray-600">{employee.position}¬∫</span>}
                              </div>
                              <div>
                                <p className="font-medium text-gray-900">{employee.name}</p>
                                <p className="text-sm text-gray-600">{employee.email}</p>
                              </div>
                            </div>
                            <div className="text-right">
                              <p className="text-lg font-bold text-gray-900">
                                {employee.categoryPoints} pts
                              </p>
                              <p className="text-xs text-gray-500">
                                {selectedRankingCategory === "Vendas" && "üü¢ Vendas"}
                                {selectedRankingCategory === "Recupera√ß√£o" && "üü† Recupera√ß√£o"}
                                {selectedRankingCategory === "Atualiza√ß√£o" && "üü£ Atualiza√ß√£o"}
                                {selectedRankingCategory === "Gal√°xia de reconhecimento" && "üü° Reconhecimento"}
                                {selectedRankingCategory === "Pr√©-vendas" && "üîµ Pr√©-vendas"}
                              </p>
                            </div>
                          </div>
                        ))
                      ) : (
                        <div className="text-center py-8">
                          <Trophy className="w-12 h-12 text-gray-300 mx-auto mb-3" />
                          <p className="text-gray-500">
                            Nenhum colaborador possui pontos em {selectedRankingCategory === "Gal√°xia de reconhecimento" ? "Reconhecimento" : selectedRankingCategory} ainda
                          </p>
                          <p className="text-sm text-gray-400 mt-1">
                            Adicione figurinhas desta categoria para ver o ranking
                          </p>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>

                {/* Resumo Geral */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Star className="w-5 h-5 text-blue-500" />
                      Resumo Geral por Categoria
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid md:grid-cols-2 lg:grid-cols-5 gap-4">
                      {defaultCategories.map((category) => {
                        const ranking = getCategoryRanking(category)
                        const totalPoints = ranking.reduce((sum, emp) => sum + emp.categoryPoints, 0)
                        const participantes = ranking.length
                        
                        return (
                          <div key={category} className="p-4 border rounded-lg">
                            <div className="flex items-center gap-2 mb-2">
                              {category === "Vendas" && "üü¢"}
                              {category === "Recupera√ß√£o" && "üü†"}
                              {category === "Atualiza√ß√£o" && "üü£"}
                              {category === "Gal√°xia de reconhecimento" && "üü°"}
                              {category === "Pr√©-vendas" && "üîµ"}
                              <span className="font-medium text-sm">
                                {category === "Gal√°xia de reconhecimento" ? "Reconhecimento" : category}
                              </span>
                            </div>
                            <div className="space-y-1">
                              <p className="text-2xl font-bold text-gray-900">{totalPoints}</p>
                              <p className="text-xs text-gray-600">pontos totais</p>
                              <p className="text-xs text-gray-500">{participantes} participantes</p>
                            </div>
                          </div>
                        )
                      })}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
          </Tabs>
        </div>

        {/* Modal de Edi√ß√£o de Colaborador */}
        {editingEmployee && (
          <Dialog open={!!editingEmployee} onOpenChange={closeEditEmployee}>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Editar Colaborador</DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Nome
                  </label>
                  <Input
                    placeholder="Nome completo"
                    value={editEmployeeName}
                    onChange={(e) => setEditEmployeeName(e.target.value)}
                    disabled={loading}
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Email
                  </label>
                  <Input
                    type="email"
                    placeholder="Email"
                    value={editEmployeeEmail}
                    onChange={(e) => setEditEmployeeEmail(e.target.value)}
                    disabled={loading}
                  />
                </div>
                
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <label className="block text-sm font-medium text-gray-700">
                      Pontua√ß√£o
                    </label>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={() => setShowCategoryPoints(!showCategoryPoints)}
                      disabled={loading}
                    >
                      {showCategoryPoints ? "Edi√ß√£o Simples" : "Editar por Categoria"}
                    </Button>
                  </div>
                  
                  {!showCategoryPoints ? (
                    <div>
                      <Input
                        type="number"
                        min="0"
                        placeholder="0"
                        value={editEmployeePoints}
                        onChange={(e) => setEditEmployeePoints(e.target.value)}
                        disabled={loading}
                      />
                      <p className="text-sm text-gray-500 mt-1">
                        Ajuste a pontua√ß√£o total do colaborador
                      </p>
                    </div>
                  ) : (
                    <div className="space-y-3">
                      <p className="text-sm text-gray-500">
                        Edite as pontua√ß√µes por categoria (o total ser√° calculado automaticamente)
                      </p>
                      
                      {defaultCategories.map((category) => (
                        <div key={category}>
                          <label className="block text-xs font-medium text-gray-600 mb-1">
                            {category === "Gal√°xia de reconhecimento" ? "Reconhecimento" : category}
                          </label>
                          <Input
                            type="number"
                            min="0"
                            placeholder="0"
                            value={editCategoryPoints[category] || "0"}
                            onChange={(e) => setEditCategoryPoints(prev => ({
                              ...prev,
                              [category]: e.target.value
                            }))}
                            disabled={loading}
                            className="text-sm"
                          />
                        </div>
                      ))}
                      
                      <div className="pt-2 border-t">
                        <p className="text-sm font-medium text-gray-700">
                          Total Calculado: {Object.values(editCategoryPoints).reduce((sum, val) => sum + (parseInt(val) || 0), 0)} pontos
                        </p>
                      </div>
                    </div>
                  )}
                </div>

                <div className="flex gap-2 pt-4">
                  <Button 
                    onClick={handleEditEmployee} 
                    disabled={loading}
                    className="flex-1"
                  >
                    {loading ? "Salvando..." : "Salvar Altera√ß√µes"}
                  </Button>
                  
                  <Button 
                    variant="outline" 
                    onClick={closeEditEmployee}
                    disabled={loading}
                  >
                    Cancelar
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        )}
      </div>
    </ProtectedRoute>
  )
}
